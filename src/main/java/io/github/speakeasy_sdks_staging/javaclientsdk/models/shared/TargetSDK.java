/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class TargetSDK {

    /**
     * Remote commit ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commit_head")
    private Optional<String> commitHead;

    /**
     * Name of the CI environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("continuous_integration_environment")
    private Optional<String> continuousIntegrationEnvironment;

    /**
     * Error message if the last event was not successful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<String> error;

    /**
     * Version of the generated target (post generation)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_config_post_version")
    private Optional<String> generateConfigPostVersion;

    /**
     * Eligible feature set during generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_eligible_features")
    private Optional<String> generateEligibleFeatures;

    /**
     * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
     */
    @JsonProperty("generate_gen_lock_id")
    private String generateGenLockId;

    /**
     * Features prior to generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_features")
    private Optional<String> generateGenLockPreFeatures;

    /**
     * Artifact version for the Previous Generation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_gen_lock_pre_version")
    private Optional<String> generateGenLockPreVersion;

    /**
     * The number of operations ignored in generation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_number_of_operations_ignored")
    private Optional<Long> generateNumberOfOperationsIgnored;

    /**
     * The number of operations used in generation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_number_of_operations_used")
    private Optional<Long> generateNumberOfOperationsUsed;

    /**
     * Indicates whether the target was considered published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_published")
    private Optional<Boolean> generatePublished;

    /**
     * eg `typescript`, `terraform`, `python`
     */
    @JsonProperty("generate_target")
    private String generateTarget;

    /**
     * The workflow name of the target.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target_name")
    private Optional<String> generateTargetName;

    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generate_target_version")
    private Optional<String> generateTargetVersion;

    /**
     * GitHub organization of the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_organization")
    private Optional<String> ghActionOrganization;

    /**
     * GitHub Action ref value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_ref")
    private Optional<String> ghActionRef;

    /**
     * GitHub repository of the action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_repository")
    private Optional<String> ghActionRepository;

    /**
     * Link to the GitHub action run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_run_link")
    private Optional<String> ghActionRunLink;

    /**
     * Version of the GitHub action.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gh_action_version")
    private Optional<String> ghActionVersion;

    /**
     * Current working directory relative to the git root.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_relative_cwd")
    private Optional<String> gitRelativeCwd;

    /**
     * Default owner for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_owner")
    private Optional<String> gitRemoteDefaultOwner;

    /**
     * Default repository name for git remote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_remote_default_repo")
    private Optional<String> gitRemoteDefaultRepo;

    /**
     * User email from git configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_user_email")
    private Optional<String> gitUserEmail;

    /**
     * User's name from git configuration. (not GitHub username)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("git_user_name")
    private Optional<String> gitUserName;

    /**
     * Remote hostname.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    private Optional<String> hostname;

    /**
     * Unique identifier of the target the same as `generate_gen_lock_id`
     */
    @JsonProperty("id")
    private String id;

    /**
     * Timestamp when the event was created in the database.
     */
    @JsonProperty("last_event_created_at")
    private OffsetDateTime lastEventCreatedAt;

    /**
     * Unique identifier of the last event for the target
     */
    @JsonProperty("last_event_id")
    private String lastEventId;

    /**
     * Type of interaction.
     */
    @JsonProperty("last_event_interaction_type")
    private InteractionType lastEventInteractionType;

    /**
     * Label of the git repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repo_label")
    private Optional<String> repoLabel;

    /**
     * The blob digest of the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_blob_digest")
    private Optional<String> sourceBlobDigest;

    /**
     * The namespace name of the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_namespace_name")
    private Optional<String> sourceNamespaceName;

    /**
     * The revision digest of the source.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_revision_digest")
    private Optional<String> sourceRevisionDigest;

    /**
     * Indicates whether the event was successful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("success")
    private Optional<Boolean> success;

    /**
     * Workflow file (post execution)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_post_raw")
    private Optional<String> workflowPostRaw;

    /**
     * Workflow file (prior to execution)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflow_pre_raw")
    private Optional<String> workflowPreRaw;

    @JsonCreator
    public TargetSDK(
            @JsonProperty("commit_head") Optional<String> commitHead,
            @JsonProperty("continuous_integration_environment") Optional<String> continuousIntegrationEnvironment,
            @JsonProperty("error") Optional<String> error,
            @JsonProperty("generate_config_post_version") Optional<String> generateConfigPostVersion,
            @JsonProperty("generate_eligible_features") Optional<String> generateEligibleFeatures,
            @JsonProperty("generate_gen_lock_id") String generateGenLockId,
            @JsonProperty("generate_gen_lock_pre_features") Optional<String> generateGenLockPreFeatures,
            @JsonProperty("generate_gen_lock_pre_version") Optional<String> generateGenLockPreVersion,
            @JsonProperty("generate_number_of_operations_ignored") Optional<Long> generateNumberOfOperationsIgnored,
            @JsonProperty("generate_number_of_operations_used") Optional<Long> generateNumberOfOperationsUsed,
            @JsonProperty("generate_published") Optional<Boolean> generatePublished,
            @JsonProperty("generate_target") String generateTarget,
            @JsonProperty("generate_target_name") Optional<String> generateTargetName,
            @JsonProperty("generate_target_version") Optional<String> generateTargetVersion,
            @JsonProperty("gh_action_organization") Optional<String> ghActionOrganization,
            @JsonProperty("gh_action_ref") Optional<String> ghActionRef,
            @JsonProperty("gh_action_repository") Optional<String> ghActionRepository,
            @JsonProperty("gh_action_run_link") Optional<String> ghActionRunLink,
            @JsonProperty("gh_action_version") Optional<String> ghActionVersion,
            @JsonProperty("git_relative_cwd") Optional<String> gitRelativeCwd,
            @JsonProperty("git_remote_default_owner") Optional<String> gitRemoteDefaultOwner,
            @JsonProperty("git_remote_default_repo") Optional<String> gitRemoteDefaultRepo,
            @JsonProperty("git_user_email") Optional<String> gitUserEmail,
            @JsonProperty("git_user_name") Optional<String> gitUserName,
            @JsonProperty("hostname") Optional<String> hostname,
            @JsonProperty("id") String id,
            @JsonProperty("last_event_created_at") OffsetDateTime lastEventCreatedAt,
            @JsonProperty("last_event_id") String lastEventId,
            @JsonProperty("last_event_interaction_type") InteractionType lastEventInteractionType,
            @JsonProperty("repo_label") Optional<String> repoLabel,
            @JsonProperty("source_blob_digest") Optional<String> sourceBlobDigest,
            @JsonProperty("source_namespace_name") Optional<String> sourceNamespaceName,
            @JsonProperty("source_revision_digest") Optional<String> sourceRevisionDigest,
            @JsonProperty("success") Optional<Boolean> success,
            @JsonProperty("workflow_post_raw") Optional<String> workflowPostRaw,
            @JsonProperty("workflow_pre_raw") Optional<String> workflowPreRaw) {
        Utils.checkNotNull(commitHead, "commitHead");
        Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
        Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
        Utils.checkNotNull(generatePublished, "generatePublished");
        Utils.checkNotNull(generateTarget, "generateTarget");
        Utils.checkNotNull(generateTargetName, "generateTargetName");
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        Utils.checkNotNull(ghActionRef, "ghActionRef");
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        Utils.checkNotNull(gitUserName, "gitUserName");
        Utils.checkNotNull(hostname, "hostname");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lastEventCreatedAt, "lastEventCreatedAt");
        Utils.checkNotNull(lastEventId, "lastEventId");
        Utils.checkNotNull(lastEventInteractionType, "lastEventInteractionType");
        Utils.checkNotNull(repoLabel, "repoLabel");
        Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
        Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        Utils.checkNotNull(success, "success");
        Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
        Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
        this.commitHead = commitHead;
        this.continuousIntegrationEnvironment = continuousIntegrationEnvironment;
        this.error = error;
        this.generateConfigPostVersion = generateConfigPostVersion;
        this.generateEligibleFeatures = generateEligibleFeatures;
        this.generateGenLockId = generateGenLockId;
        this.generateGenLockPreFeatures = generateGenLockPreFeatures;
        this.generateGenLockPreVersion = generateGenLockPreVersion;
        this.generateNumberOfOperationsIgnored = generateNumberOfOperationsIgnored;
        this.generateNumberOfOperationsUsed = generateNumberOfOperationsUsed;
        this.generatePublished = generatePublished;
        this.generateTarget = generateTarget;
        this.generateTargetName = generateTargetName;
        this.generateTargetVersion = generateTargetVersion;
        this.ghActionOrganization = ghActionOrganization;
        this.ghActionRef = ghActionRef;
        this.ghActionRepository = ghActionRepository;
        this.ghActionRunLink = ghActionRunLink;
        this.ghActionVersion = ghActionVersion;
        this.gitRelativeCwd = gitRelativeCwd;
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        this.gitUserEmail = gitUserEmail;
        this.gitUserName = gitUserName;
        this.hostname = hostname;
        this.id = id;
        this.lastEventCreatedAt = lastEventCreatedAt;
        this.lastEventId = lastEventId;
        this.lastEventInteractionType = lastEventInteractionType;
        this.repoLabel = repoLabel;
        this.sourceBlobDigest = sourceBlobDigest;
        this.sourceNamespaceName = sourceNamespaceName;
        this.sourceRevisionDigest = sourceRevisionDigest;
        this.success = success;
        this.workflowPostRaw = workflowPostRaw;
        this.workflowPreRaw = workflowPreRaw;
    }
    
    public TargetSDK(
            String generateGenLockId,
            String generateTarget,
            String id,
            OffsetDateTime lastEventCreatedAt,
            String lastEventId,
            InteractionType lastEventInteractionType) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), generateGenLockId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), generateTarget, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), id, lastEventCreatedAt, lastEventId, lastEventInteractionType, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Remote commit ID.
     */
    @JsonIgnore
    public Optional<String> commitHead() {
        return commitHead;
    }

    /**
     * Name of the CI environment.
     */
    @JsonIgnore
    public Optional<String> continuousIntegrationEnvironment() {
        return continuousIntegrationEnvironment;
    }

    /**
     * Error message if the last event was not successful.
     */
    @JsonIgnore
    public Optional<String> error() {
        return error;
    }

    /**
     * Version of the generated target (post generation)
     */
    @JsonIgnore
    public Optional<String> generateConfigPostVersion() {
        return generateConfigPostVersion;
    }

    /**
     * Eligible feature set during generation
     */
    @JsonIgnore
    public Optional<String> generateEligibleFeatures() {
        return generateEligibleFeatures;
    }

    /**
     * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
     */
    @JsonIgnore
    public String generateGenLockId() {
        return generateGenLockId;
    }

    /**
     * Features prior to generation
     */
    @JsonIgnore
    public Optional<String> generateGenLockPreFeatures() {
        return generateGenLockPreFeatures;
    }

    /**
     * Artifact version for the Previous Generation
     */
    @JsonIgnore
    public Optional<String> generateGenLockPreVersion() {
        return generateGenLockPreVersion;
    }

    /**
     * The number of operations ignored in generation.
     */
    @JsonIgnore
    public Optional<Long> generateNumberOfOperationsIgnored() {
        return generateNumberOfOperationsIgnored;
    }

    /**
     * The number of operations used in generation.
     */
    @JsonIgnore
    public Optional<Long> generateNumberOfOperationsUsed() {
        return generateNumberOfOperationsUsed;
    }

    /**
     * Indicates whether the target was considered published.
     */
    @JsonIgnore
    public Optional<Boolean> generatePublished() {
        return generatePublished;
    }

    /**
     * eg `typescript`, `terraform`, `python`
     */
    @JsonIgnore
    public String generateTarget() {
        return generateTarget;
    }

    /**
     * The workflow name of the target.
     */
    @JsonIgnore
    public Optional<String> generateTargetName() {
        return generateTargetName;
    }

    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    @JsonIgnore
    public Optional<String> generateTargetVersion() {
        return generateTargetVersion;
    }

    /**
     * GitHub organization of the action.
     */
    @JsonIgnore
    public Optional<String> ghActionOrganization() {
        return ghActionOrganization;
    }

    /**
     * GitHub Action ref value.
     */
    @JsonIgnore
    public Optional<String> ghActionRef() {
        return ghActionRef;
    }

    /**
     * GitHub repository of the action.
     */
    @JsonIgnore
    public Optional<String> ghActionRepository() {
        return ghActionRepository;
    }

    /**
     * Link to the GitHub action run.
     */
    @JsonIgnore
    public Optional<String> ghActionRunLink() {
        return ghActionRunLink;
    }

    /**
     * Version of the GitHub action.
     */
    @JsonIgnore
    public Optional<String> ghActionVersion() {
        return ghActionVersion;
    }

    /**
     * Current working directory relative to the git root.
     */
    @JsonIgnore
    public Optional<String> gitRelativeCwd() {
        return gitRelativeCwd;
    }

    /**
     * Default owner for git remote.
     */
    @JsonIgnore
    public Optional<String> gitRemoteDefaultOwner() {
        return gitRemoteDefaultOwner;
    }

    /**
     * Default repository name for git remote.
     */
    @JsonIgnore
    public Optional<String> gitRemoteDefaultRepo() {
        return gitRemoteDefaultRepo;
    }

    /**
     * User email from git configuration.
     */
    @JsonIgnore
    public Optional<String> gitUserEmail() {
        return gitUserEmail;
    }

    /**
     * User's name from git configuration. (not GitHub username)
     */
    @JsonIgnore
    public Optional<String> gitUserName() {
        return gitUserName;
    }

    /**
     * Remote hostname.
     */
    @JsonIgnore
    public Optional<String> hostname() {
        return hostname;
    }

    /**
     * Unique identifier of the target the same as `generate_gen_lock_id`
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Timestamp when the event was created in the database.
     */
    @JsonIgnore
    public OffsetDateTime lastEventCreatedAt() {
        return lastEventCreatedAt;
    }

    /**
     * Unique identifier of the last event for the target
     */
    @JsonIgnore
    public String lastEventId() {
        return lastEventId;
    }

    /**
     * Type of interaction.
     */
    @JsonIgnore
    public InteractionType lastEventInteractionType() {
        return lastEventInteractionType;
    }

    /**
     * Label of the git repository.
     */
    @JsonIgnore
    public Optional<String> repoLabel() {
        return repoLabel;
    }

    /**
     * The blob digest of the source.
     */
    @JsonIgnore
    public Optional<String> sourceBlobDigest() {
        return sourceBlobDigest;
    }

    /**
     * The namespace name of the source.
     */
    @JsonIgnore
    public Optional<String> sourceNamespaceName() {
        return sourceNamespaceName;
    }

    /**
     * The revision digest of the source.
     */
    @JsonIgnore
    public Optional<String> sourceRevisionDigest() {
        return sourceRevisionDigest;
    }

    /**
     * Indicates whether the event was successful.
     */
    @JsonIgnore
    public Optional<Boolean> success() {
        return success;
    }

    /**
     * Workflow file (post execution)
     */
    @JsonIgnore
    public Optional<String> workflowPostRaw() {
        return workflowPostRaw;
    }

    /**
     * Workflow file (prior to execution)
     */
    @JsonIgnore
    public Optional<String> workflowPreRaw() {
        return workflowPreRaw;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Remote commit ID.
     */
    public TargetSDK withCommitHead(String commitHead) {
        Utils.checkNotNull(commitHead, "commitHead");
        this.commitHead = Optional.ofNullable(commitHead);
        return this;
    }

    /**
     * Remote commit ID.
     */
    public TargetSDK withCommitHead(Optional<String> commitHead) {
        Utils.checkNotNull(commitHead, "commitHead");
        this.commitHead = commitHead;
        return this;
    }

    /**
     * Name of the CI environment.
     */
    public TargetSDK withContinuousIntegrationEnvironment(String continuousIntegrationEnvironment) {
        Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
        this.continuousIntegrationEnvironment = Optional.ofNullable(continuousIntegrationEnvironment);
        return this;
    }

    /**
     * Name of the CI environment.
     */
    public TargetSDK withContinuousIntegrationEnvironment(Optional<String> continuousIntegrationEnvironment) {
        Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
        this.continuousIntegrationEnvironment = continuousIntegrationEnvironment;
        return this;
    }

    /**
     * Error message if the last event was not successful.
     */
    public TargetSDK withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    /**
     * Error message if the last event was not successful.
     */
    public TargetSDK withError(Optional<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    /**
     * Version of the generated target (post generation)
     */
    public TargetSDK withGenerateConfigPostVersion(String generateConfigPostVersion) {
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        this.generateConfigPostVersion = Optional.ofNullable(generateConfigPostVersion);
        return this;
    }

    /**
     * Version of the generated target (post generation)
     */
    public TargetSDK withGenerateConfigPostVersion(Optional<String> generateConfigPostVersion) {
        Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
        this.generateConfigPostVersion = generateConfigPostVersion;
        return this;
    }

    /**
     * Eligible feature set during generation
     */
    public TargetSDK withGenerateEligibleFeatures(String generateEligibleFeatures) {
        Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
        this.generateEligibleFeatures = Optional.ofNullable(generateEligibleFeatures);
        return this;
    }

    /**
     * Eligible feature set during generation
     */
    public TargetSDK withGenerateEligibleFeatures(Optional<String> generateEligibleFeatures) {
        Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
        this.generateEligibleFeatures = generateEligibleFeatures;
        return this;
    }

    /**
     * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
     */
    public TargetSDK withGenerateGenLockId(String generateGenLockId) {
        Utils.checkNotNull(generateGenLockId, "generateGenLockId");
        this.generateGenLockId = generateGenLockId;
        return this;
    }

    /**
     * Features prior to generation
     */
    public TargetSDK withGenerateGenLockPreFeatures(String generateGenLockPreFeatures) {
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        this.generateGenLockPreFeatures = Optional.ofNullable(generateGenLockPreFeatures);
        return this;
    }

    /**
     * Features prior to generation
     */
    public TargetSDK withGenerateGenLockPreFeatures(Optional<String> generateGenLockPreFeatures) {
        Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
        this.generateGenLockPreFeatures = generateGenLockPreFeatures;
        return this;
    }

    /**
     * Artifact version for the Previous Generation
     */
    public TargetSDK withGenerateGenLockPreVersion(String generateGenLockPreVersion) {
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        this.generateGenLockPreVersion = Optional.ofNullable(generateGenLockPreVersion);
        return this;
    }

    /**
     * Artifact version for the Previous Generation
     */
    public TargetSDK withGenerateGenLockPreVersion(Optional<String> generateGenLockPreVersion) {
        Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
        this.generateGenLockPreVersion = generateGenLockPreVersion;
        return this;
    }

    /**
     * The number of operations ignored in generation.
     */
    public TargetSDK withGenerateNumberOfOperationsIgnored(long generateNumberOfOperationsIgnored) {
        Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
        this.generateNumberOfOperationsIgnored = Optional.ofNullable(generateNumberOfOperationsIgnored);
        return this;
    }

    /**
     * The number of operations ignored in generation.
     */
    public TargetSDK withGenerateNumberOfOperationsIgnored(Optional<Long> generateNumberOfOperationsIgnored) {
        Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
        this.generateNumberOfOperationsIgnored = generateNumberOfOperationsIgnored;
        return this;
    }

    /**
     * The number of operations used in generation.
     */
    public TargetSDK withGenerateNumberOfOperationsUsed(long generateNumberOfOperationsUsed) {
        Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
        this.generateNumberOfOperationsUsed = Optional.ofNullable(generateNumberOfOperationsUsed);
        return this;
    }

    /**
     * The number of operations used in generation.
     */
    public TargetSDK withGenerateNumberOfOperationsUsed(Optional<Long> generateNumberOfOperationsUsed) {
        Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
        this.generateNumberOfOperationsUsed = generateNumberOfOperationsUsed;
        return this;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public TargetSDK withGeneratePublished(boolean generatePublished) {
        Utils.checkNotNull(generatePublished, "generatePublished");
        this.generatePublished = Optional.ofNullable(generatePublished);
        return this;
    }

    /**
     * Indicates whether the target was considered published.
     */
    public TargetSDK withGeneratePublished(Optional<Boolean> generatePublished) {
        Utils.checkNotNull(generatePublished, "generatePublished");
        this.generatePublished = generatePublished;
        return this;
    }

    /**
     * eg `typescript`, `terraform`, `python`
     */
    public TargetSDK withGenerateTarget(String generateTarget) {
        Utils.checkNotNull(generateTarget, "generateTarget");
        this.generateTarget = generateTarget;
        return this;
    }

    /**
     * The workflow name of the target.
     */
    public TargetSDK withGenerateTargetName(String generateTargetName) {
        Utils.checkNotNull(generateTargetName, "generateTargetName");
        this.generateTargetName = Optional.ofNullable(generateTargetName);
        return this;
    }

    /**
     * The workflow name of the target.
     */
    public TargetSDK withGenerateTargetName(Optional<String> generateTargetName) {
        Utils.checkNotNull(generateTargetName, "generateTargetName");
        this.generateTargetName = generateTargetName;
        return this;
    }

    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    public TargetSDK withGenerateTargetVersion(String generateTargetVersion) {
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        this.generateTargetVersion = Optional.ofNullable(generateTargetVersion);
        return this;
    }

    /**
     * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
     */
    public TargetSDK withGenerateTargetVersion(Optional<String> generateTargetVersion) {
        Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
        this.generateTargetVersion = generateTargetVersion;
        return this;
    }

    /**
     * GitHub organization of the action.
     */
    public TargetSDK withGhActionOrganization(String ghActionOrganization) {
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        this.ghActionOrganization = Optional.ofNullable(ghActionOrganization);
        return this;
    }

    /**
     * GitHub organization of the action.
     */
    public TargetSDK withGhActionOrganization(Optional<String> ghActionOrganization) {
        Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
        this.ghActionOrganization = ghActionOrganization;
        return this;
    }

    /**
     * GitHub Action ref value.
     */
    public TargetSDK withGhActionRef(String ghActionRef) {
        Utils.checkNotNull(ghActionRef, "ghActionRef");
        this.ghActionRef = Optional.ofNullable(ghActionRef);
        return this;
    }

    /**
     * GitHub Action ref value.
     */
    public TargetSDK withGhActionRef(Optional<String> ghActionRef) {
        Utils.checkNotNull(ghActionRef, "ghActionRef");
        this.ghActionRef = ghActionRef;
        return this;
    }

    /**
     * GitHub repository of the action.
     */
    public TargetSDK withGhActionRepository(String ghActionRepository) {
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        this.ghActionRepository = Optional.ofNullable(ghActionRepository);
        return this;
    }

    /**
     * GitHub repository of the action.
     */
    public TargetSDK withGhActionRepository(Optional<String> ghActionRepository) {
        Utils.checkNotNull(ghActionRepository, "ghActionRepository");
        this.ghActionRepository = ghActionRepository;
        return this;
    }

    /**
     * Link to the GitHub action run.
     */
    public TargetSDK withGhActionRunLink(String ghActionRunLink) {
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        this.ghActionRunLink = Optional.ofNullable(ghActionRunLink);
        return this;
    }

    /**
     * Link to the GitHub action run.
     */
    public TargetSDK withGhActionRunLink(Optional<String> ghActionRunLink) {
        Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
        this.ghActionRunLink = ghActionRunLink;
        return this;
    }

    /**
     * Version of the GitHub action.
     */
    public TargetSDK withGhActionVersion(String ghActionVersion) {
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        this.ghActionVersion = Optional.ofNullable(ghActionVersion);
        return this;
    }

    /**
     * Version of the GitHub action.
     */
    public TargetSDK withGhActionVersion(Optional<String> ghActionVersion) {
        Utils.checkNotNull(ghActionVersion, "ghActionVersion");
        this.ghActionVersion = ghActionVersion;
        return this;
    }

    /**
     * Current working directory relative to the git root.
     */
    public TargetSDK withGitRelativeCwd(String gitRelativeCwd) {
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        this.gitRelativeCwd = Optional.ofNullable(gitRelativeCwd);
        return this;
    }

    /**
     * Current working directory relative to the git root.
     */
    public TargetSDK withGitRelativeCwd(Optional<String> gitRelativeCwd) {
        Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
        this.gitRelativeCwd = gitRelativeCwd;
        return this;
    }

    /**
     * Default owner for git remote.
     */
    public TargetSDK withGitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        this.gitRemoteDefaultOwner = Optional.ofNullable(gitRemoteDefaultOwner);
        return this;
    }

    /**
     * Default owner for git remote.
     */
    public TargetSDK withGitRemoteDefaultOwner(Optional<String> gitRemoteDefaultOwner) {
        Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
        this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
        return this;
    }

    /**
     * Default repository name for git remote.
     */
    public TargetSDK withGitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        this.gitRemoteDefaultRepo = Optional.ofNullable(gitRemoteDefaultRepo);
        return this;
    }

    /**
     * Default repository name for git remote.
     */
    public TargetSDK withGitRemoteDefaultRepo(Optional<String> gitRemoteDefaultRepo) {
        Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
        this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
        return this;
    }

    /**
     * User email from git configuration.
     */
    public TargetSDK withGitUserEmail(String gitUserEmail) {
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        this.gitUserEmail = Optional.ofNullable(gitUserEmail);
        return this;
    }

    /**
     * User email from git configuration.
     */
    public TargetSDK withGitUserEmail(Optional<String> gitUserEmail) {
        Utils.checkNotNull(gitUserEmail, "gitUserEmail");
        this.gitUserEmail = gitUserEmail;
        return this;
    }

    /**
     * User's name from git configuration. (not GitHub username)
     */
    public TargetSDK withGitUserName(String gitUserName) {
        Utils.checkNotNull(gitUserName, "gitUserName");
        this.gitUserName = Optional.ofNullable(gitUserName);
        return this;
    }

    /**
     * User's name from git configuration. (not GitHub username)
     */
    public TargetSDK withGitUserName(Optional<String> gitUserName) {
        Utils.checkNotNull(gitUserName, "gitUserName");
        this.gitUserName = gitUserName;
        return this;
    }

    /**
     * Remote hostname.
     */
    public TargetSDK withHostname(String hostname) {
        Utils.checkNotNull(hostname, "hostname");
        this.hostname = Optional.ofNullable(hostname);
        return this;
    }

    /**
     * Remote hostname.
     */
    public TargetSDK withHostname(Optional<String> hostname) {
        Utils.checkNotNull(hostname, "hostname");
        this.hostname = hostname;
        return this;
    }

    /**
     * Unique identifier of the target the same as `generate_gen_lock_id`
     */
    public TargetSDK withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Timestamp when the event was created in the database.
     */
    public TargetSDK withLastEventCreatedAt(OffsetDateTime lastEventCreatedAt) {
        Utils.checkNotNull(lastEventCreatedAt, "lastEventCreatedAt");
        this.lastEventCreatedAt = lastEventCreatedAt;
        return this;
    }

    /**
     * Unique identifier of the last event for the target
     */
    public TargetSDK withLastEventId(String lastEventId) {
        Utils.checkNotNull(lastEventId, "lastEventId");
        this.lastEventId = lastEventId;
        return this;
    }

    /**
     * Type of interaction.
     */
    public TargetSDK withLastEventInteractionType(InteractionType lastEventInteractionType) {
        Utils.checkNotNull(lastEventInteractionType, "lastEventInteractionType");
        this.lastEventInteractionType = lastEventInteractionType;
        return this;
    }

    /**
     * Label of the git repository.
     */
    public TargetSDK withRepoLabel(String repoLabel) {
        Utils.checkNotNull(repoLabel, "repoLabel");
        this.repoLabel = Optional.ofNullable(repoLabel);
        return this;
    }

    /**
     * Label of the git repository.
     */
    public TargetSDK withRepoLabel(Optional<String> repoLabel) {
        Utils.checkNotNull(repoLabel, "repoLabel");
        this.repoLabel = repoLabel;
        return this;
    }

    /**
     * The blob digest of the source.
     */
    public TargetSDK withSourceBlobDigest(String sourceBlobDigest) {
        Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
        this.sourceBlobDigest = Optional.ofNullable(sourceBlobDigest);
        return this;
    }

    /**
     * The blob digest of the source.
     */
    public TargetSDK withSourceBlobDigest(Optional<String> sourceBlobDigest) {
        Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
        this.sourceBlobDigest = sourceBlobDigest;
        return this;
    }

    /**
     * The namespace name of the source.
     */
    public TargetSDK withSourceNamespaceName(String sourceNamespaceName) {
        Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
        this.sourceNamespaceName = Optional.ofNullable(sourceNamespaceName);
        return this;
    }

    /**
     * The namespace name of the source.
     */
    public TargetSDK withSourceNamespaceName(Optional<String> sourceNamespaceName) {
        Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
        this.sourceNamespaceName = sourceNamespaceName;
        return this;
    }

    /**
     * The revision digest of the source.
     */
    public TargetSDK withSourceRevisionDigest(String sourceRevisionDigest) {
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        this.sourceRevisionDigest = Optional.ofNullable(sourceRevisionDigest);
        return this;
    }

    /**
     * The revision digest of the source.
     */
    public TargetSDK withSourceRevisionDigest(Optional<String> sourceRevisionDigest) {
        Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
        this.sourceRevisionDigest = sourceRevisionDigest;
        return this;
    }

    /**
     * Indicates whether the event was successful.
     */
    public TargetSDK withSuccess(boolean success) {
        Utils.checkNotNull(success, "success");
        this.success = Optional.ofNullable(success);
        return this;
    }

    /**
     * Indicates whether the event was successful.
     */
    public TargetSDK withSuccess(Optional<Boolean> success) {
        Utils.checkNotNull(success, "success");
        this.success = success;
        return this;
    }

    /**
     * Workflow file (post execution)
     */
    public TargetSDK withWorkflowPostRaw(String workflowPostRaw) {
        Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
        this.workflowPostRaw = Optional.ofNullable(workflowPostRaw);
        return this;
    }

    /**
     * Workflow file (post execution)
     */
    public TargetSDK withWorkflowPostRaw(Optional<String> workflowPostRaw) {
        Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
        this.workflowPostRaw = workflowPostRaw;
        return this;
    }

    /**
     * Workflow file (prior to execution)
     */
    public TargetSDK withWorkflowPreRaw(String workflowPreRaw) {
        Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
        this.workflowPreRaw = Optional.ofNullable(workflowPreRaw);
        return this;
    }

    /**
     * Workflow file (prior to execution)
     */
    public TargetSDK withWorkflowPreRaw(Optional<String> workflowPreRaw) {
        Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
        this.workflowPreRaw = workflowPreRaw;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TargetSDK other = (TargetSDK) o;
        return 
            Objects.deepEquals(this.commitHead, other.commitHead) &&
            Objects.deepEquals(this.continuousIntegrationEnvironment, other.continuousIntegrationEnvironment) &&
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.generateConfigPostVersion, other.generateConfigPostVersion) &&
            Objects.deepEquals(this.generateEligibleFeatures, other.generateEligibleFeatures) &&
            Objects.deepEquals(this.generateGenLockId, other.generateGenLockId) &&
            Objects.deepEquals(this.generateGenLockPreFeatures, other.generateGenLockPreFeatures) &&
            Objects.deepEquals(this.generateGenLockPreVersion, other.generateGenLockPreVersion) &&
            Objects.deepEquals(this.generateNumberOfOperationsIgnored, other.generateNumberOfOperationsIgnored) &&
            Objects.deepEquals(this.generateNumberOfOperationsUsed, other.generateNumberOfOperationsUsed) &&
            Objects.deepEquals(this.generatePublished, other.generatePublished) &&
            Objects.deepEquals(this.generateTarget, other.generateTarget) &&
            Objects.deepEquals(this.generateTargetName, other.generateTargetName) &&
            Objects.deepEquals(this.generateTargetVersion, other.generateTargetVersion) &&
            Objects.deepEquals(this.ghActionOrganization, other.ghActionOrganization) &&
            Objects.deepEquals(this.ghActionRef, other.ghActionRef) &&
            Objects.deepEquals(this.ghActionRepository, other.ghActionRepository) &&
            Objects.deepEquals(this.ghActionRunLink, other.ghActionRunLink) &&
            Objects.deepEquals(this.ghActionVersion, other.ghActionVersion) &&
            Objects.deepEquals(this.gitRelativeCwd, other.gitRelativeCwd) &&
            Objects.deepEquals(this.gitRemoteDefaultOwner, other.gitRemoteDefaultOwner) &&
            Objects.deepEquals(this.gitRemoteDefaultRepo, other.gitRemoteDefaultRepo) &&
            Objects.deepEquals(this.gitUserEmail, other.gitUserEmail) &&
            Objects.deepEquals(this.gitUserName, other.gitUserName) &&
            Objects.deepEquals(this.hostname, other.hostname) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.lastEventCreatedAt, other.lastEventCreatedAt) &&
            Objects.deepEquals(this.lastEventId, other.lastEventId) &&
            Objects.deepEquals(this.lastEventInteractionType, other.lastEventInteractionType) &&
            Objects.deepEquals(this.repoLabel, other.repoLabel) &&
            Objects.deepEquals(this.sourceBlobDigest, other.sourceBlobDigest) &&
            Objects.deepEquals(this.sourceNamespaceName, other.sourceNamespaceName) &&
            Objects.deepEquals(this.sourceRevisionDigest, other.sourceRevisionDigest) &&
            Objects.deepEquals(this.success, other.success) &&
            Objects.deepEquals(this.workflowPostRaw, other.workflowPostRaw) &&
            Objects.deepEquals(this.workflowPreRaw, other.workflowPreRaw);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            commitHead,
            continuousIntegrationEnvironment,
            error,
            generateConfigPostVersion,
            generateEligibleFeatures,
            generateGenLockId,
            generateGenLockPreFeatures,
            generateGenLockPreVersion,
            generateNumberOfOperationsIgnored,
            generateNumberOfOperationsUsed,
            generatePublished,
            generateTarget,
            generateTargetName,
            generateTargetVersion,
            ghActionOrganization,
            ghActionRef,
            ghActionRepository,
            ghActionRunLink,
            ghActionVersion,
            gitRelativeCwd,
            gitRemoteDefaultOwner,
            gitRemoteDefaultRepo,
            gitUserEmail,
            gitUserName,
            hostname,
            id,
            lastEventCreatedAt,
            lastEventId,
            lastEventInteractionType,
            repoLabel,
            sourceBlobDigest,
            sourceNamespaceName,
            sourceRevisionDigest,
            success,
            workflowPostRaw,
            workflowPreRaw);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TargetSDK.class,
                "commitHead", commitHead,
                "continuousIntegrationEnvironment", continuousIntegrationEnvironment,
                "error", error,
                "generateConfigPostVersion", generateConfigPostVersion,
                "generateEligibleFeatures", generateEligibleFeatures,
                "generateGenLockId", generateGenLockId,
                "generateGenLockPreFeatures", generateGenLockPreFeatures,
                "generateGenLockPreVersion", generateGenLockPreVersion,
                "generateNumberOfOperationsIgnored", generateNumberOfOperationsIgnored,
                "generateNumberOfOperationsUsed", generateNumberOfOperationsUsed,
                "generatePublished", generatePublished,
                "generateTarget", generateTarget,
                "generateTargetName", generateTargetName,
                "generateTargetVersion", generateTargetVersion,
                "ghActionOrganization", ghActionOrganization,
                "ghActionRef", ghActionRef,
                "ghActionRepository", ghActionRepository,
                "ghActionRunLink", ghActionRunLink,
                "ghActionVersion", ghActionVersion,
                "gitRelativeCwd", gitRelativeCwd,
                "gitRemoteDefaultOwner", gitRemoteDefaultOwner,
                "gitRemoteDefaultRepo", gitRemoteDefaultRepo,
                "gitUserEmail", gitUserEmail,
                "gitUserName", gitUserName,
                "hostname", hostname,
                "id", id,
                "lastEventCreatedAt", lastEventCreatedAt,
                "lastEventId", lastEventId,
                "lastEventInteractionType", lastEventInteractionType,
                "repoLabel", repoLabel,
                "sourceBlobDigest", sourceBlobDigest,
                "sourceNamespaceName", sourceNamespaceName,
                "sourceRevisionDigest", sourceRevisionDigest,
                "success", success,
                "workflowPostRaw", workflowPostRaw,
                "workflowPreRaw", workflowPreRaw);
    }
    
    public final static class Builder {
 
        private Optional<String> commitHead = Optional.empty();
 
        private Optional<String> continuousIntegrationEnvironment = Optional.empty();
 
        private Optional<String> error = Optional.empty();
 
        private Optional<String> generateConfigPostVersion = Optional.empty();
 
        private Optional<String> generateEligibleFeatures = Optional.empty();
 
        private String generateGenLockId;
 
        private Optional<String> generateGenLockPreFeatures = Optional.empty();
 
        private Optional<String> generateGenLockPreVersion = Optional.empty();
 
        private Optional<Long> generateNumberOfOperationsIgnored = Optional.empty();
 
        private Optional<Long> generateNumberOfOperationsUsed = Optional.empty();
 
        private Optional<Boolean> generatePublished = Optional.empty();
 
        private String generateTarget;
 
        private Optional<String> generateTargetName = Optional.empty();
 
        private Optional<String> generateTargetVersion = Optional.empty();
 
        private Optional<String> ghActionOrganization = Optional.empty();
 
        private Optional<String> ghActionRef = Optional.empty();
 
        private Optional<String> ghActionRepository = Optional.empty();
 
        private Optional<String> ghActionRunLink = Optional.empty();
 
        private Optional<String> ghActionVersion = Optional.empty();
 
        private Optional<String> gitRelativeCwd = Optional.empty();
 
        private Optional<String> gitRemoteDefaultOwner = Optional.empty();
 
        private Optional<String> gitRemoteDefaultRepo = Optional.empty();
 
        private Optional<String> gitUserEmail = Optional.empty();
 
        private Optional<String> gitUserName = Optional.empty();
 
        private Optional<String> hostname = Optional.empty();
 
        private String id;
 
        private OffsetDateTime lastEventCreatedAt;
 
        private String lastEventId;
 
        private InteractionType lastEventInteractionType;
 
        private Optional<String> repoLabel = Optional.empty();
 
        private Optional<String> sourceBlobDigest = Optional.empty();
 
        private Optional<String> sourceNamespaceName = Optional.empty();
 
        private Optional<String> sourceRevisionDigest = Optional.empty();
 
        private Optional<Boolean> success = Optional.empty();
 
        private Optional<String> workflowPostRaw = Optional.empty();
 
        private Optional<String> workflowPreRaw = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Remote commit ID.
         */
        public Builder commitHead(String commitHead) {
            Utils.checkNotNull(commitHead, "commitHead");
            this.commitHead = Optional.ofNullable(commitHead);
            return this;
        }

        /**
         * Remote commit ID.
         */
        public Builder commitHead(Optional<String> commitHead) {
            Utils.checkNotNull(commitHead, "commitHead");
            this.commitHead = commitHead;
            return this;
        }

        /**
         * Name of the CI environment.
         */
        public Builder continuousIntegrationEnvironment(String continuousIntegrationEnvironment) {
            Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
            this.continuousIntegrationEnvironment = Optional.ofNullable(continuousIntegrationEnvironment);
            return this;
        }

        /**
         * Name of the CI environment.
         */
        public Builder continuousIntegrationEnvironment(Optional<String> continuousIntegrationEnvironment) {
            Utils.checkNotNull(continuousIntegrationEnvironment, "continuousIntegrationEnvironment");
            this.continuousIntegrationEnvironment = continuousIntegrationEnvironment;
            return this;
        }

        /**
         * Error message if the last event was not successful.
         */
        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * Error message if the last event was not successful.
         */
        public Builder error(Optional<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        /**
         * Version of the generated target (post generation)
         */
        public Builder generateConfigPostVersion(String generateConfigPostVersion) {
            Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
            this.generateConfigPostVersion = Optional.ofNullable(generateConfigPostVersion);
            return this;
        }

        /**
         * Version of the generated target (post generation)
         */
        public Builder generateConfigPostVersion(Optional<String> generateConfigPostVersion) {
            Utils.checkNotNull(generateConfigPostVersion, "generateConfigPostVersion");
            this.generateConfigPostVersion = generateConfigPostVersion;
            return this;
        }

        /**
         * Eligible feature set during generation
         */
        public Builder generateEligibleFeatures(String generateEligibleFeatures) {
            Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
            this.generateEligibleFeatures = Optional.ofNullable(generateEligibleFeatures);
            return this;
        }

        /**
         * Eligible feature set during generation
         */
        public Builder generateEligibleFeatures(Optional<String> generateEligibleFeatures) {
            Utils.checkNotNull(generateEligibleFeatures, "generateEligibleFeatures");
            this.generateEligibleFeatures = generateEligibleFeatures;
            return this;
        }

        /**
         * gen.lock ID (expected to be a uuid). The same as `id`. A unique identifier for the target.
         */
        public Builder generateGenLockId(String generateGenLockId) {
            Utils.checkNotNull(generateGenLockId, "generateGenLockId");
            this.generateGenLockId = generateGenLockId;
            return this;
        }

        /**
         * Features prior to generation
         */
        public Builder generateGenLockPreFeatures(String generateGenLockPreFeatures) {
            Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
            this.generateGenLockPreFeatures = Optional.ofNullable(generateGenLockPreFeatures);
            return this;
        }

        /**
         * Features prior to generation
         */
        public Builder generateGenLockPreFeatures(Optional<String> generateGenLockPreFeatures) {
            Utils.checkNotNull(generateGenLockPreFeatures, "generateGenLockPreFeatures");
            this.generateGenLockPreFeatures = generateGenLockPreFeatures;
            return this;
        }

        /**
         * Artifact version for the Previous Generation
         */
        public Builder generateGenLockPreVersion(String generateGenLockPreVersion) {
            Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
            this.generateGenLockPreVersion = Optional.ofNullable(generateGenLockPreVersion);
            return this;
        }

        /**
         * Artifact version for the Previous Generation
         */
        public Builder generateGenLockPreVersion(Optional<String> generateGenLockPreVersion) {
            Utils.checkNotNull(generateGenLockPreVersion, "generateGenLockPreVersion");
            this.generateGenLockPreVersion = generateGenLockPreVersion;
            return this;
        }

        /**
         * The number of operations ignored in generation.
         */
        public Builder generateNumberOfOperationsIgnored(long generateNumberOfOperationsIgnored) {
            Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
            this.generateNumberOfOperationsIgnored = Optional.ofNullable(generateNumberOfOperationsIgnored);
            return this;
        }

        /**
         * The number of operations ignored in generation.
         */
        public Builder generateNumberOfOperationsIgnored(Optional<Long> generateNumberOfOperationsIgnored) {
            Utils.checkNotNull(generateNumberOfOperationsIgnored, "generateNumberOfOperationsIgnored");
            this.generateNumberOfOperationsIgnored = generateNumberOfOperationsIgnored;
            return this;
        }

        /**
         * The number of operations used in generation.
         */
        public Builder generateNumberOfOperationsUsed(long generateNumberOfOperationsUsed) {
            Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
            this.generateNumberOfOperationsUsed = Optional.ofNullable(generateNumberOfOperationsUsed);
            return this;
        }

        /**
         * The number of operations used in generation.
         */
        public Builder generateNumberOfOperationsUsed(Optional<Long> generateNumberOfOperationsUsed) {
            Utils.checkNotNull(generateNumberOfOperationsUsed, "generateNumberOfOperationsUsed");
            this.generateNumberOfOperationsUsed = generateNumberOfOperationsUsed;
            return this;
        }

        /**
         * Indicates whether the target was considered published.
         */
        public Builder generatePublished(boolean generatePublished) {
            Utils.checkNotNull(generatePublished, "generatePublished");
            this.generatePublished = Optional.ofNullable(generatePublished);
            return this;
        }

        /**
         * Indicates whether the target was considered published.
         */
        public Builder generatePublished(Optional<Boolean> generatePublished) {
            Utils.checkNotNull(generatePublished, "generatePublished");
            this.generatePublished = generatePublished;
            return this;
        }

        /**
         * eg `typescript`, `terraform`, `python`
         */
        public Builder generateTarget(String generateTarget) {
            Utils.checkNotNull(generateTarget, "generateTarget");
            this.generateTarget = generateTarget;
            return this;
        }

        /**
         * The workflow name of the target.
         */
        public Builder generateTargetName(String generateTargetName) {
            Utils.checkNotNull(generateTargetName, "generateTargetName");
            this.generateTargetName = Optional.ofNullable(generateTargetName);
            return this;
        }

        /**
         * The workflow name of the target.
         */
        public Builder generateTargetName(Optional<String> generateTargetName) {
            Utils.checkNotNull(generateTargetName, "generateTargetName");
            this.generateTargetName = generateTargetName;
            return this;
        }

        /**
         * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
         */
        public Builder generateTargetVersion(String generateTargetVersion) {
            Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
            this.generateTargetVersion = Optional.ofNullable(generateTargetVersion);
            return this;
        }

        /**
         * The version of the Speakeasy generator for this target eg v2 of the typescript generator.
         */
        public Builder generateTargetVersion(Optional<String> generateTargetVersion) {
            Utils.checkNotNull(generateTargetVersion, "generateTargetVersion");
            this.generateTargetVersion = generateTargetVersion;
            return this;
        }

        /**
         * GitHub organization of the action.
         */
        public Builder ghActionOrganization(String ghActionOrganization) {
            Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
            this.ghActionOrganization = Optional.ofNullable(ghActionOrganization);
            return this;
        }

        /**
         * GitHub organization of the action.
         */
        public Builder ghActionOrganization(Optional<String> ghActionOrganization) {
            Utils.checkNotNull(ghActionOrganization, "ghActionOrganization");
            this.ghActionOrganization = ghActionOrganization;
            return this;
        }

        /**
         * GitHub Action ref value.
         */
        public Builder ghActionRef(String ghActionRef) {
            Utils.checkNotNull(ghActionRef, "ghActionRef");
            this.ghActionRef = Optional.ofNullable(ghActionRef);
            return this;
        }

        /**
         * GitHub Action ref value.
         */
        public Builder ghActionRef(Optional<String> ghActionRef) {
            Utils.checkNotNull(ghActionRef, "ghActionRef");
            this.ghActionRef = ghActionRef;
            return this;
        }

        /**
         * GitHub repository of the action.
         */
        public Builder ghActionRepository(String ghActionRepository) {
            Utils.checkNotNull(ghActionRepository, "ghActionRepository");
            this.ghActionRepository = Optional.ofNullable(ghActionRepository);
            return this;
        }

        /**
         * GitHub repository of the action.
         */
        public Builder ghActionRepository(Optional<String> ghActionRepository) {
            Utils.checkNotNull(ghActionRepository, "ghActionRepository");
            this.ghActionRepository = ghActionRepository;
            return this;
        }

        /**
         * Link to the GitHub action run.
         */
        public Builder ghActionRunLink(String ghActionRunLink) {
            Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
            this.ghActionRunLink = Optional.ofNullable(ghActionRunLink);
            return this;
        }

        /**
         * Link to the GitHub action run.
         */
        public Builder ghActionRunLink(Optional<String> ghActionRunLink) {
            Utils.checkNotNull(ghActionRunLink, "ghActionRunLink");
            this.ghActionRunLink = ghActionRunLink;
            return this;
        }

        /**
         * Version of the GitHub action.
         */
        public Builder ghActionVersion(String ghActionVersion) {
            Utils.checkNotNull(ghActionVersion, "ghActionVersion");
            this.ghActionVersion = Optional.ofNullable(ghActionVersion);
            return this;
        }

        /**
         * Version of the GitHub action.
         */
        public Builder ghActionVersion(Optional<String> ghActionVersion) {
            Utils.checkNotNull(ghActionVersion, "ghActionVersion");
            this.ghActionVersion = ghActionVersion;
            return this;
        }

        /**
         * Current working directory relative to the git root.
         */
        public Builder gitRelativeCwd(String gitRelativeCwd) {
            Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
            this.gitRelativeCwd = Optional.ofNullable(gitRelativeCwd);
            return this;
        }

        /**
         * Current working directory relative to the git root.
         */
        public Builder gitRelativeCwd(Optional<String> gitRelativeCwd) {
            Utils.checkNotNull(gitRelativeCwd, "gitRelativeCwd");
            this.gitRelativeCwd = gitRelativeCwd;
            return this;
        }

        /**
         * Default owner for git remote.
         */
        public Builder gitRemoteDefaultOwner(String gitRemoteDefaultOwner) {
            Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
            this.gitRemoteDefaultOwner = Optional.ofNullable(gitRemoteDefaultOwner);
            return this;
        }

        /**
         * Default owner for git remote.
         */
        public Builder gitRemoteDefaultOwner(Optional<String> gitRemoteDefaultOwner) {
            Utils.checkNotNull(gitRemoteDefaultOwner, "gitRemoteDefaultOwner");
            this.gitRemoteDefaultOwner = gitRemoteDefaultOwner;
            return this;
        }

        /**
         * Default repository name for git remote.
         */
        public Builder gitRemoteDefaultRepo(String gitRemoteDefaultRepo) {
            Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
            this.gitRemoteDefaultRepo = Optional.ofNullable(gitRemoteDefaultRepo);
            return this;
        }

        /**
         * Default repository name for git remote.
         */
        public Builder gitRemoteDefaultRepo(Optional<String> gitRemoteDefaultRepo) {
            Utils.checkNotNull(gitRemoteDefaultRepo, "gitRemoteDefaultRepo");
            this.gitRemoteDefaultRepo = gitRemoteDefaultRepo;
            return this;
        }

        /**
         * User email from git configuration.
         */
        public Builder gitUserEmail(String gitUserEmail) {
            Utils.checkNotNull(gitUserEmail, "gitUserEmail");
            this.gitUserEmail = Optional.ofNullable(gitUserEmail);
            return this;
        }

        /**
         * User email from git configuration.
         */
        public Builder gitUserEmail(Optional<String> gitUserEmail) {
            Utils.checkNotNull(gitUserEmail, "gitUserEmail");
            this.gitUserEmail = gitUserEmail;
            return this;
        }

        /**
         * User's name from git configuration. (not GitHub username)
         */
        public Builder gitUserName(String gitUserName) {
            Utils.checkNotNull(gitUserName, "gitUserName");
            this.gitUserName = Optional.ofNullable(gitUserName);
            return this;
        }

        /**
         * User's name from git configuration. (not GitHub username)
         */
        public Builder gitUserName(Optional<String> gitUserName) {
            Utils.checkNotNull(gitUserName, "gitUserName");
            this.gitUserName = gitUserName;
            return this;
        }

        /**
         * Remote hostname.
         */
        public Builder hostname(String hostname) {
            Utils.checkNotNull(hostname, "hostname");
            this.hostname = Optional.ofNullable(hostname);
            return this;
        }

        /**
         * Remote hostname.
         */
        public Builder hostname(Optional<String> hostname) {
            Utils.checkNotNull(hostname, "hostname");
            this.hostname = hostname;
            return this;
        }

        /**
         * Unique identifier of the target the same as `generate_gen_lock_id`
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Timestamp when the event was created in the database.
         */
        public Builder lastEventCreatedAt(OffsetDateTime lastEventCreatedAt) {
            Utils.checkNotNull(lastEventCreatedAt, "lastEventCreatedAt");
            this.lastEventCreatedAt = lastEventCreatedAt;
            return this;
        }

        /**
         * Unique identifier of the last event for the target
         */
        public Builder lastEventId(String lastEventId) {
            Utils.checkNotNull(lastEventId, "lastEventId");
            this.lastEventId = lastEventId;
            return this;
        }

        /**
         * Type of interaction.
         */
        public Builder lastEventInteractionType(InteractionType lastEventInteractionType) {
            Utils.checkNotNull(lastEventInteractionType, "lastEventInteractionType");
            this.lastEventInteractionType = lastEventInteractionType;
            return this;
        }

        /**
         * Label of the git repository.
         */
        public Builder repoLabel(String repoLabel) {
            Utils.checkNotNull(repoLabel, "repoLabel");
            this.repoLabel = Optional.ofNullable(repoLabel);
            return this;
        }

        /**
         * Label of the git repository.
         */
        public Builder repoLabel(Optional<String> repoLabel) {
            Utils.checkNotNull(repoLabel, "repoLabel");
            this.repoLabel = repoLabel;
            return this;
        }

        /**
         * The blob digest of the source.
         */
        public Builder sourceBlobDigest(String sourceBlobDigest) {
            Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
            this.sourceBlobDigest = Optional.ofNullable(sourceBlobDigest);
            return this;
        }

        /**
         * The blob digest of the source.
         */
        public Builder sourceBlobDigest(Optional<String> sourceBlobDigest) {
            Utils.checkNotNull(sourceBlobDigest, "sourceBlobDigest");
            this.sourceBlobDigest = sourceBlobDigest;
            return this;
        }

        /**
         * The namespace name of the source.
         */
        public Builder sourceNamespaceName(String sourceNamespaceName) {
            Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
            this.sourceNamespaceName = Optional.ofNullable(sourceNamespaceName);
            return this;
        }

        /**
         * The namespace name of the source.
         */
        public Builder sourceNamespaceName(Optional<String> sourceNamespaceName) {
            Utils.checkNotNull(sourceNamespaceName, "sourceNamespaceName");
            this.sourceNamespaceName = sourceNamespaceName;
            return this;
        }

        /**
         * The revision digest of the source.
         */
        public Builder sourceRevisionDigest(String sourceRevisionDigest) {
            Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
            this.sourceRevisionDigest = Optional.ofNullable(sourceRevisionDigest);
            return this;
        }

        /**
         * The revision digest of the source.
         */
        public Builder sourceRevisionDigest(Optional<String> sourceRevisionDigest) {
            Utils.checkNotNull(sourceRevisionDigest, "sourceRevisionDigest");
            this.sourceRevisionDigest = sourceRevisionDigest;
            return this;
        }

        /**
         * Indicates whether the event was successful.
         */
        public Builder success(boolean success) {
            Utils.checkNotNull(success, "success");
            this.success = Optional.ofNullable(success);
            return this;
        }

        /**
         * Indicates whether the event was successful.
         */
        public Builder success(Optional<Boolean> success) {
            Utils.checkNotNull(success, "success");
            this.success = success;
            return this;
        }

        /**
         * Workflow file (post execution)
         */
        public Builder workflowPostRaw(String workflowPostRaw) {
            Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
            this.workflowPostRaw = Optional.ofNullable(workflowPostRaw);
            return this;
        }

        /**
         * Workflow file (post execution)
         */
        public Builder workflowPostRaw(Optional<String> workflowPostRaw) {
            Utils.checkNotNull(workflowPostRaw, "workflowPostRaw");
            this.workflowPostRaw = workflowPostRaw;
            return this;
        }

        /**
         * Workflow file (prior to execution)
         */
        public Builder workflowPreRaw(String workflowPreRaw) {
            Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
            this.workflowPreRaw = Optional.ofNullable(workflowPreRaw);
            return this;
        }

        /**
         * Workflow file (prior to execution)
         */
        public Builder workflowPreRaw(Optional<String> workflowPreRaw) {
            Utils.checkNotNull(workflowPreRaw, "workflowPreRaw");
            this.workflowPreRaw = workflowPreRaw;
            return this;
        }
        
        public TargetSDK build() {
            return new TargetSDK(
                commitHead,
                continuousIntegrationEnvironment,
                error,
                generateConfigPostVersion,
                generateEligibleFeatures,
                generateGenLockId,
                generateGenLockPreFeatures,
                generateGenLockPreVersion,
                generateNumberOfOperationsIgnored,
                generateNumberOfOperationsUsed,
                generatePublished,
                generateTarget,
                generateTargetName,
                generateTargetVersion,
                ghActionOrganization,
                ghActionRef,
                ghActionRepository,
                ghActionRunLink,
                ghActionVersion,
                gitRelativeCwd,
                gitRemoteDefaultOwner,
                gitRemoteDefaultRepo,
                gitUserEmail,
                gitUserName,
                hostname,
                id,
                lastEventCreatedAt,
                lastEventId,
                lastEventInteractionType,
                repoLabel,
                sourceBlobDigest,
                sourceNamespaceName,
                sourceRevisionDigest,
                success,
                workflowPostRaw,
                workflowPreRaw);
        }
    }
}

