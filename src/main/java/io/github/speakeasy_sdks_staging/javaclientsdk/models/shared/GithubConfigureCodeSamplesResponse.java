/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * GithubConfigureCodeSamplesResponse - A response to configure GitHub code samples
 */

public class GithubConfigureCodeSamplesResponse {

    /**
     * The URL of the code sample overlay registry
     */
    @JsonProperty("codeSampleOverlayRegistryURL")
    private String codeSampleOverlayRegistryURL;

    /**
     * The ID of the GitHub action that was dispatched
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ghActionID")
    private Optional<String> ghActionID;

    /**
     * A document referenced by a workflow
     */
    @JsonProperty("source")
    private WorkflowDocument source;

    @JsonCreator
    public GithubConfigureCodeSamplesResponse(
            @JsonProperty("codeSampleOverlayRegistryURL") String codeSampleOverlayRegistryURL,
            @JsonProperty("ghActionID") Optional<String> ghActionID,
            @JsonProperty("source") WorkflowDocument source) {
        Utils.checkNotNull(codeSampleOverlayRegistryURL, "codeSampleOverlayRegistryURL");
        Utils.checkNotNull(ghActionID, "ghActionID");
        Utils.checkNotNull(source, "source");
        this.codeSampleOverlayRegistryURL = codeSampleOverlayRegistryURL;
        this.ghActionID = ghActionID;
        this.source = source;
    }
    
    public GithubConfigureCodeSamplesResponse(
            String codeSampleOverlayRegistryURL,
            WorkflowDocument source) {
        this(codeSampleOverlayRegistryURL, Optional.empty(), source);
    }

    /**
     * The URL of the code sample overlay registry
     */
    @JsonIgnore
    public String codeSampleOverlayRegistryURL() {
        return codeSampleOverlayRegistryURL;
    }

    /**
     * The ID of the GitHub action that was dispatched
     */
    @JsonIgnore
    public Optional<String> ghActionID() {
        return ghActionID;
    }

    /**
     * A document referenced by a workflow
     */
    @JsonIgnore
    public WorkflowDocument source() {
        return source;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The URL of the code sample overlay registry
     */
    public GithubConfigureCodeSamplesResponse withCodeSampleOverlayRegistryURL(String codeSampleOverlayRegistryURL) {
        Utils.checkNotNull(codeSampleOverlayRegistryURL, "codeSampleOverlayRegistryURL");
        this.codeSampleOverlayRegistryURL = codeSampleOverlayRegistryURL;
        return this;
    }

    /**
     * The ID of the GitHub action that was dispatched
     */
    public GithubConfigureCodeSamplesResponse withGhActionID(String ghActionID) {
        Utils.checkNotNull(ghActionID, "ghActionID");
        this.ghActionID = Optional.ofNullable(ghActionID);
        return this;
    }

    /**
     * The ID of the GitHub action that was dispatched
     */
    public GithubConfigureCodeSamplesResponse withGhActionID(Optional<String> ghActionID) {
        Utils.checkNotNull(ghActionID, "ghActionID");
        this.ghActionID = ghActionID;
        return this;
    }

    /**
     * A document referenced by a workflow
     */
    public GithubConfigureCodeSamplesResponse withSource(WorkflowDocument source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubConfigureCodeSamplesResponse other = (GithubConfigureCodeSamplesResponse) o;
        return 
            Objects.deepEquals(this.codeSampleOverlayRegistryURL, other.codeSampleOverlayRegistryURL) &&
            Objects.deepEquals(this.ghActionID, other.ghActionID) &&
            Objects.deepEquals(this.source, other.source);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            codeSampleOverlayRegistryURL,
            ghActionID,
            source);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GithubConfigureCodeSamplesResponse.class,
                "codeSampleOverlayRegistryURL", codeSampleOverlayRegistryURL,
                "ghActionID", ghActionID,
                "source", source);
    }
    
    public final static class Builder {
 
        private String codeSampleOverlayRegistryURL;
 
        private Optional<String> ghActionID = Optional.empty();
 
        private WorkflowDocument source;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The URL of the code sample overlay registry
         */
        public Builder codeSampleOverlayRegistryURL(String codeSampleOverlayRegistryURL) {
            Utils.checkNotNull(codeSampleOverlayRegistryURL, "codeSampleOverlayRegistryURL");
            this.codeSampleOverlayRegistryURL = codeSampleOverlayRegistryURL;
            return this;
        }

        /**
         * The ID of the GitHub action that was dispatched
         */
        public Builder ghActionID(String ghActionID) {
            Utils.checkNotNull(ghActionID, "ghActionID");
            this.ghActionID = Optional.ofNullable(ghActionID);
            return this;
        }

        /**
         * The ID of the GitHub action that was dispatched
         */
        public Builder ghActionID(Optional<String> ghActionID) {
            Utils.checkNotNull(ghActionID, "ghActionID");
            this.ghActionID = ghActionID;
            return this;
        }

        /**
         * A document referenced by a workflow
         */
        public Builder source(WorkflowDocument source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }
        
        public GithubConfigureCodeSamplesResponse build() {
            return new GithubConfigureCodeSamplesResponse(
                codeSampleOverlayRegistryURL,
                ghActionID,
                source);
        }
    }
}

