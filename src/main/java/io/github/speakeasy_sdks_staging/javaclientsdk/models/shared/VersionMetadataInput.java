/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * VersionMetadataInput - A set of keys and associated values, attached to a particular version of an Api.
 */

public class VersionMetadataInput {

    /**
     * The key for this metadata.
     */
    @JsonProperty("meta_key")
    private String metaKey;

    /**
     * One of the values for this metadata.
     */
    @JsonProperty("meta_value")
    private String metaValue;

    @JsonCreator
    public VersionMetadataInput(
            @JsonProperty("meta_key") String metaKey,
            @JsonProperty("meta_value") String metaValue) {
        Utils.checkNotNull(metaKey, "metaKey");
        Utils.checkNotNull(metaValue, "metaValue");
        this.metaKey = metaKey;
        this.metaValue = metaValue;
    }

    /**
     * The key for this metadata.
     */
    @JsonIgnore
    public String metaKey() {
        return metaKey;
    }

    /**
     * One of the values for this metadata.
     */
    @JsonIgnore
    public String metaValue() {
        return metaValue;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The key for this metadata.
     */
    public VersionMetadataInput withMetaKey(String metaKey) {
        Utils.checkNotNull(metaKey, "metaKey");
        this.metaKey = metaKey;
        return this;
    }

    /**
     * One of the values for this metadata.
     */
    public VersionMetadataInput withMetaValue(String metaValue) {
        Utils.checkNotNull(metaValue, "metaValue");
        this.metaValue = metaValue;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VersionMetadataInput other = (VersionMetadataInput) o;
        return 
            Objects.deepEquals(this.metaKey, other.metaKey) &&
            Objects.deepEquals(this.metaValue, other.metaValue);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            metaKey,
            metaValue);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VersionMetadataInput.class,
                "metaKey", metaKey,
                "metaValue", metaValue);
    }
    
    public final static class Builder {
 
        private String metaKey;
 
        private String metaValue;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The key for this metadata.
         */
        public Builder metaKey(String metaKey) {
            Utils.checkNotNull(metaKey, "metaKey");
            this.metaKey = metaKey;
            return this;
        }

        /**
         * One of the values for this metadata.
         */
        public Builder metaValue(String metaValue) {
            Utils.checkNotNull(metaValue, "metaValue");
            this.metaValue = metaValue;
            return this;
        }
        
        public VersionMetadataInput build() {
            return new VersionMetadataInput(
                metaKey,
                metaValue);
        }
    }
}

