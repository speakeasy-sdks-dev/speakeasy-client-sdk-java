/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * SchemaDiff - A SchemaDiff represents a diff of two Schemas.
 */

public class SchemaDiff {

    /**
     * Holds every addition change in the diff.
     */
    @JsonProperty("additions")
    private List<String> additions;

    /**
     * Holds every deletion change in the diff.
     */
    @JsonProperty("deletions")
    private List<String> deletions;

    /**
     * Holds every modification change in the diff.
     */
    @JsonProperty("modifications")
    private Map<String, ValueChange> modifications;

    @JsonCreator
    public SchemaDiff(
            @JsonProperty("additions") List<String> additions,
            @JsonProperty("deletions") List<String> deletions,
            @JsonProperty("modifications") Map<String, ValueChange> modifications) {
        Utils.checkNotNull(additions, "additions");
        Utils.checkNotNull(deletions, "deletions");
        modifications = Utils.emptyMapIfNull(modifications);
        this.additions = additions;
        this.deletions = deletions;
        this.modifications = modifications;
    }

    /**
     * Holds every addition change in the diff.
     */
    @JsonIgnore
    public List<String> additions() {
        return additions;
    }

    /**
     * Holds every deletion change in the diff.
     */
    @JsonIgnore
    public List<String> deletions() {
        return deletions;
    }

    /**
     * Holds every modification change in the diff.
     */
    @JsonIgnore
    public Map<String, ValueChange> modifications() {
        return modifications;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Holds every addition change in the diff.
     */
    public SchemaDiff withAdditions(List<String> additions) {
        Utils.checkNotNull(additions, "additions");
        this.additions = additions;
        return this;
    }

    /**
     * Holds every deletion change in the diff.
     */
    public SchemaDiff withDeletions(List<String> deletions) {
        Utils.checkNotNull(deletions, "deletions");
        this.deletions = deletions;
        return this;
    }

    /**
     * Holds every modification change in the diff.
     */
    public SchemaDiff withModifications(Map<String, ValueChange> modifications) {
        Utils.checkNotNull(modifications, "modifications");
        this.modifications = modifications;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SchemaDiff other = (SchemaDiff) o;
        return 
            Objects.deepEquals(this.additions, other.additions) &&
            Objects.deepEquals(this.deletions, other.deletions) &&
            Objects.deepEquals(this.modifications, other.modifications);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additions,
            deletions,
            modifications);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SchemaDiff.class,
                "additions", additions,
                "deletions", deletions,
                "modifications", modifications);
    }
    
    public final static class Builder {
 
        private List<String> additions;
 
        private List<String> deletions;
 
        private Map<String, ValueChange> modifications;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Holds every addition change in the diff.
         */
        public Builder additions(List<String> additions) {
            Utils.checkNotNull(additions, "additions");
            this.additions = additions;
            return this;
        }

        /**
         * Holds every deletion change in the diff.
         */
        public Builder deletions(List<String> deletions) {
            Utils.checkNotNull(deletions, "deletions");
            this.deletions = deletions;
            return this;
        }

        /**
         * Holds every modification change in the diff.
         */
        public Builder modifications(Map<String, ValueChange> modifications) {
            Utils.checkNotNull(modifications, "modifications");
            this.modifications = modifications;
            return this;
        }
        
        public SchemaDiff build() {
            return new SchemaDiff(
                additions,
                deletions,
                modifications);
        }
    }
}

