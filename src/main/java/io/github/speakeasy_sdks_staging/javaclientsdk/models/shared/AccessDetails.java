/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class AccessDetails {

    @JsonProperty("generation_allowed")
    private boolean generationAllowed;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    private Optional<? extends Level> level;

    @JsonProperty("message")
    private String message;

    @JsonCreator
    public AccessDetails(
            @JsonProperty("generation_allowed") boolean generationAllowed,
            @JsonProperty("level") Optional<? extends Level> level,
            @JsonProperty("message") String message) {
        Utils.checkNotNull(generationAllowed, "generationAllowed");
        Utils.checkNotNull(level, "level");
        Utils.checkNotNull(message, "message");
        this.generationAllowed = generationAllowed;
        this.level = level;
        this.message = message;
    }
    
    public AccessDetails(
            boolean generationAllowed,
            String message) {
        this(generationAllowed, Optional.empty(), message);
    }

    @JsonIgnore
    public boolean generationAllowed() {
        return generationAllowed;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Level> level() {
        return (Optional<Level>) level;
    }

    @JsonIgnore
    public String message() {
        return message;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AccessDetails withGenerationAllowed(boolean generationAllowed) {
        Utils.checkNotNull(generationAllowed, "generationAllowed");
        this.generationAllowed = generationAllowed;
        return this;
    }

    public AccessDetails withLevel(Level level) {
        Utils.checkNotNull(level, "level");
        this.level = Optional.ofNullable(level);
        return this;
    }

    public AccessDetails withLevel(Optional<? extends Level> level) {
        Utils.checkNotNull(level, "level");
        this.level = level;
        return this;
    }

    public AccessDetails withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessDetails other = (AccessDetails) o;
        return 
            Objects.deepEquals(this.generationAllowed, other.generationAllowed) &&
            Objects.deepEquals(this.level, other.level) &&
            Objects.deepEquals(this.message, other.message);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            generationAllowed,
            level,
            message);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccessDetails.class,
                "generationAllowed", generationAllowed,
                "level", level,
                "message", message);
    }
    
    public final static class Builder {
 
        private Boolean generationAllowed;
 
        private Optional<? extends Level> level = Optional.empty();
 
        private String message;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder generationAllowed(boolean generationAllowed) {
            Utils.checkNotNull(generationAllowed, "generationAllowed");
            this.generationAllowed = generationAllowed;
            return this;
        }

        public Builder level(Level level) {
            Utils.checkNotNull(level, "level");
            this.level = Optional.ofNullable(level);
            return this;
        }

        public Builder level(Optional<? extends Level> level) {
            Utils.checkNotNull(level, "level");
            this.level = level;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }
        
        public AccessDetails build() {
            return new AccessDetails(
                generationAllowed,
                level,
                message);
        }
    }
}

