/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Tag {

    /**
     * Format {namespace_id}/{tag}
     */
    @JsonProperty("id")
    private String id;

    /**
     * Human readable tag name
     */
    @JsonProperty("name")
    private String name;

    @JsonProperty("namespace_name")
    private String namespaceName;

    @JsonProperty("revision_digest")
    private String revisionDigest;

    @JsonCreator
    public Tag(
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("namespace_name") String namespaceName,
            @JsonProperty("revision_digest") String revisionDigest) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(namespaceName, "namespaceName");
        Utils.checkNotNull(revisionDigest, "revisionDigest");
        this.id = id;
        this.name = name;
        this.namespaceName = namespaceName;
        this.revisionDigest = revisionDigest;
    }

    /**
     * Format {namespace_id}/{tag}
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Human readable tag name
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String namespaceName() {
        return namespaceName;
    }

    @JsonIgnore
    public String revisionDigest() {
        return revisionDigest;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Format {namespace_id}/{tag}
     */
    public Tag withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Human readable tag name
     */
    public Tag withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Tag withNamespaceName(String namespaceName) {
        Utils.checkNotNull(namespaceName, "namespaceName");
        this.namespaceName = namespaceName;
        return this;
    }

    public Tag withRevisionDigest(String revisionDigest) {
        Utils.checkNotNull(revisionDigest, "revisionDigest");
        this.revisionDigest = revisionDigest;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Tag other = (Tag) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.namespaceName, other.namespaceName) &&
            Objects.deepEquals(this.revisionDigest, other.revisionDigest);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            namespaceName,
            revisionDigest);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Tag.class,
                "id", id,
                "name", name,
                "namespaceName", namespaceName,
                "revisionDigest", revisionDigest);
    }
    
    public final static class Builder {
 
        private String id;
 
        private String name;
 
        private String namespaceName;
 
        private String revisionDigest;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Format {namespace_id}/{tag}
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Human readable tag name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder namespaceName(String namespaceName) {
            Utils.checkNotNull(namespaceName, "namespaceName");
            this.namespaceName = namespaceName;
            return this;
        }

        public Builder revisionDigest(String revisionDigest) {
            Utils.checkNotNull(revisionDigest, "revisionDigest");
            this.revisionDigest = revisionDigest;
            return this;
        }
        
        public Tag build() {
            return new Tag(
                id,
                name,
                namespaceName,
                revisionDigest);
        }
    }
}

