/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * ApiEndpointInput - An ApiEndpoint is a description of an Endpoint for an API.
 */

public class ApiEndpointInput {

    /**
     * The ID of this ApiEndpoint. This is a hash of the method and path.
     */
    @JsonProperty("api_endpoint_id")
    private String apiEndpointId;

    /**
     * A detailed description of the ApiEndpoint.
     */
    @JsonProperty("description")
    private String description;

    /**
     * A human-readable name for the ApiEndpoint.
     */
    @JsonProperty("display_name")
    private String displayName;

    /**
     * HTTP verb.
     */
    @JsonProperty("method")
    private String method;

    /**
     * Path that handles this Api.
     */
    @JsonProperty("path")
    private String path;

    /**
     * The version ID of the Api this ApiEndpoint belongs to.
     */
    @JsonProperty("version_id")
    private String versionId;

    @JsonCreator
    public ApiEndpointInput(
            @JsonProperty("api_endpoint_id") String apiEndpointId,
            @JsonProperty("description") String description,
            @JsonProperty("display_name") String displayName,
            @JsonProperty("method") String method,
            @JsonProperty("path") String path,
            @JsonProperty("version_id") String versionId) {
        Utils.checkNotNull(apiEndpointId, "apiEndpointId");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(versionId, "versionId");
        this.apiEndpointId = apiEndpointId;
        this.description = description;
        this.displayName = displayName;
        this.method = method;
        this.path = path;
        this.versionId = versionId;
    }

    /**
     * The ID of this ApiEndpoint. This is a hash of the method and path.
     */
    @JsonIgnore
    public String apiEndpointId() {
        return apiEndpointId;
    }

    /**
     * A detailed description of the ApiEndpoint.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * A human-readable name for the ApiEndpoint.
     */
    @JsonIgnore
    public String displayName() {
        return displayName;
    }

    /**
     * HTTP verb.
     */
    @JsonIgnore
    public String method() {
        return method;
    }

    /**
     * Path that handles this Api.
     */
    @JsonIgnore
    public String path() {
        return path;
    }

    /**
     * The version ID of the Api this ApiEndpoint belongs to.
     */
    @JsonIgnore
    public String versionId() {
        return versionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of this ApiEndpoint. This is a hash of the method and path.
     */
    public ApiEndpointInput withApiEndpointId(String apiEndpointId) {
        Utils.checkNotNull(apiEndpointId, "apiEndpointId");
        this.apiEndpointId = apiEndpointId;
        return this;
    }

    /**
     * A detailed description of the ApiEndpoint.
     */
    public ApiEndpointInput withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A human-readable name for the ApiEndpoint.
     */
    public ApiEndpointInput withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    /**
     * HTTP verb.
     */
    public ApiEndpointInput withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * Path that handles this Api.
     */
    public ApiEndpointInput withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    /**
     * The version ID of the Api this ApiEndpoint belongs to.
     */
    public ApiEndpointInput withVersionId(String versionId) {
        Utils.checkNotNull(versionId, "versionId");
        this.versionId = versionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiEndpointInput other = (ApiEndpointInput) o;
        return 
            Objects.deepEquals(this.apiEndpointId, other.apiEndpointId) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.path, other.path) &&
            Objects.deepEquals(this.versionId, other.versionId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiEndpointId,
            description,
            displayName,
            method,
            path,
            versionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApiEndpointInput.class,
                "apiEndpointId", apiEndpointId,
                "description", description,
                "displayName", displayName,
                "method", method,
                "path", path,
                "versionId", versionId);
    }
    
    public final static class Builder {
 
        private String apiEndpointId;
 
        private String description;
 
        private String displayName;
 
        private String method;
 
        private String path;
 
        private String versionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of this ApiEndpoint. This is a hash of the method and path.
         */
        public Builder apiEndpointId(String apiEndpointId) {
            Utils.checkNotNull(apiEndpointId, "apiEndpointId");
            this.apiEndpointId = apiEndpointId;
            return this;
        }

        /**
         * A detailed description of the ApiEndpoint.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A human-readable name for the ApiEndpoint.
         */
        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        /**
         * HTTP verb.
         */
        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * Path that handles this Api.
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        /**
         * The version ID of the Api this ApiEndpoint belongs to.
         */
        public Builder versionId(String versionId) {
            Utils.checkNotNull(versionId, "versionId");
            this.versionId = versionId;
            return this;
        }
        
        public ApiEndpointInput build() {
            return new ApiEndpointInput(
                apiEndpointId,
                description,
                displayName,
                method,
                path,
                versionId);
        }
    }
}

