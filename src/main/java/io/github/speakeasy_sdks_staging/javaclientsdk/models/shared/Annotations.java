/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * Annotations - Annotations
 */

public class Annotations {

    /**
     * The authors of the image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.authors")
    private Optional<String> orgOpencontainersImageAuthors;

    /**
     * The time the image was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.created")
    private Optional<String> orgOpencontainersImageCreated;

    /**
     * Human-readable description of the software packaged in the image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.description")
    private Optional<String> orgOpencontainersImageDescription;

    /**
     * The documentation URL of the image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.documentation")
    private Optional<String> orgOpencontainersImageDocumentation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.licenses")
    private Optional<String> orgOpencontainersImageLicenses;

    /**
     * Name of the reference for a target
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.ref.name")
    private Optional<String> orgOpencontainersImageRefName;

    /**
     * Source control revision identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.revision")
    private Optional<String> orgOpencontainersImageRevision;

    /**
     * The URL to get source code for building the image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.source")
    private Optional<String> orgOpencontainersImageSource;

    /**
     * Human-readable title of the image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.title")
    private Optional<String> orgOpencontainersImageTitle;

    /**
     * The URL of the image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.url")
    private Optional<String> orgOpencontainersImageUrl;

    /**
     * Name of the distributing entity, organization or individual.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.vendor")
    private Optional<String> orgOpencontainersImageVendor;

    /**
     * The version of the packaged software
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org.opencontainers.image.version")
    private Optional<String> orgOpencontainersImageVersion;

    @JsonCreator
    public Annotations(
            @JsonProperty("org.opencontainers.image.authors") Optional<String> orgOpencontainersImageAuthors,
            @JsonProperty("org.opencontainers.image.created") Optional<String> orgOpencontainersImageCreated,
            @JsonProperty("org.opencontainers.image.description") Optional<String> orgOpencontainersImageDescription,
            @JsonProperty("org.opencontainers.image.documentation") Optional<String> orgOpencontainersImageDocumentation,
            @JsonProperty("org.opencontainers.image.licenses") Optional<String> orgOpencontainersImageLicenses,
            @JsonProperty("org.opencontainers.image.ref.name") Optional<String> orgOpencontainersImageRefName,
            @JsonProperty("org.opencontainers.image.revision") Optional<String> orgOpencontainersImageRevision,
            @JsonProperty("org.opencontainers.image.source") Optional<String> orgOpencontainersImageSource,
            @JsonProperty("org.opencontainers.image.title") Optional<String> orgOpencontainersImageTitle,
            @JsonProperty("org.opencontainers.image.url") Optional<String> orgOpencontainersImageUrl,
            @JsonProperty("org.opencontainers.image.vendor") Optional<String> orgOpencontainersImageVendor,
            @JsonProperty("org.opencontainers.image.version") Optional<String> orgOpencontainersImageVersion) {
        Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
        Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
        Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
        Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
        Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
        Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
        Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
        Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
        Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
        Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
        Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
        Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
        this.orgOpencontainersImageAuthors = orgOpencontainersImageAuthors;
        this.orgOpencontainersImageCreated = orgOpencontainersImageCreated;
        this.orgOpencontainersImageDescription = orgOpencontainersImageDescription;
        this.orgOpencontainersImageDocumentation = orgOpencontainersImageDocumentation;
        this.orgOpencontainersImageLicenses = orgOpencontainersImageLicenses;
        this.orgOpencontainersImageRefName = orgOpencontainersImageRefName;
        this.orgOpencontainersImageRevision = orgOpencontainersImageRevision;
        this.orgOpencontainersImageSource = orgOpencontainersImageSource;
        this.orgOpencontainersImageTitle = orgOpencontainersImageTitle;
        this.orgOpencontainersImageUrl = orgOpencontainersImageUrl;
        this.orgOpencontainersImageVendor = orgOpencontainersImageVendor;
        this.orgOpencontainersImageVersion = orgOpencontainersImageVersion;
    }
    
    public Annotations() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The authors of the image
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageAuthors() {
        return orgOpencontainersImageAuthors;
    }

    /**
     * The time the image was created
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageCreated() {
        return orgOpencontainersImageCreated;
    }

    /**
     * Human-readable description of the software packaged in the image
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageDescription() {
        return orgOpencontainersImageDescription;
    }

    /**
     * The documentation URL of the image
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageDocumentation() {
        return orgOpencontainersImageDocumentation;
    }

    @JsonIgnore
    public Optional<String> orgOpencontainersImageLicenses() {
        return orgOpencontainersImageLicenses;
    }

    /**
     * Name of the reference for a target
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageRefName() {
        return orgOpencontainersImageRefName;
    }

    /**
     * Source control revision identifier
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageRevision() {
        return orgOpencontainersImageRevision;
    }

    /**
     * The URL to get source code for building the image
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageSource() {
        return orgOpencontainersImageSource;
    }

    /**
     * Human-readable title of the image
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageTitle() {
        return orgOpencontainersImageTitle;
    }

    /**
     * The URL of the image
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageUrl() {
        return orgOpencontainersImageUrl;
    }

    /**
     * Name of the distributing entity, organization or individual.
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageVendor() {
        return orgOpencontainersImageVendor;
    }

    /**
     * The version of the packaged software
     */
    @JsonIgnore
    public Optional<String> orgOpencontainersImageVersion() {
        return orgOpencontainersImageVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The authors of the image
     */
    public Annotations withOrgOpencontainersImageAuthors(String orgOpencontainersImageAuthors) {
        Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
        this.orgOpencontainersImageAuthors = Optional.ofNullable(orgOpencontainersImageAuthors);
        return this;
    }

    /**
     * The authors of the image
     */
    public Annotations withOrgOpencontainersImageAuthors(Optional<String> orgOpencontainersImageAuthors) {
        Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
        this.orgOpencontainersImageAuthors = orgOpencontainersImageAuthors;
        return this;
    }

    /**
     * The time the image was created
     */
    public Annotations withOrgOpencontainersImageCreated(String orgOpencontainersImageCreated) {
        Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
        this.orgOpencontainersImageCreated = Optional.ofNullable(orgOpencontainersImageCreated);
        return this;
    }

    /**
     * The time the image was created
     */
    public Annotations withOrgOpencontainersImageCreated(Optional<String> orgOpencontainersImageCreated) {
        Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
        this.orgOpencontainersImageCreated = orgOpencontainersImageCreated;
        return this;
    }

    /**
     * Human-readable description of the software packaged in the image
     */
    public Annotations withOrgOpencontainersImageDescription(String orgOpencontainersImageDescription) {
        Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
        this.orgOpencontainersImageDescription = Optional.ofNullable(orgOpencontainersImageDescription);
        return this;
    }

    /**
     * Human-readable description of the software packaged in the image
     */
    public Annotations withOrgOpencontainersImageDescription(Optional<String> orgOpencontainersImageDescription) {
        Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
        this.orgOpencontainersImageDescription = orgOpencontainersImageDescription;
        return this;
    }

    /**
     * The documentation URL of the image
     */
    public Annotations withOrgOpencontainersImageDocumentation(String orgOpencontainersImageDocumentation) {
        Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
        this.orgOpencontainersImageDocumentation = Optional.ofNullable(orgOpencontainersImageDocumentation);
        return this;
    }

    /**
     * The documentation URL of the image
     */
    public Annotations withOrgOpencontainersImageDocumentation(Optional<String> orgOpencontainersImageDocumentation) {
        Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
        this.orgOpencontainersImageDocumentation = orgOpencontainersImageDocumentation;
        return this;
    }

    public Annotations withOrgOpencontainersImageLicenses(String orgOpencontainersImageLicenses) {
        Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
        this.orgOpencontainersImageLicenses = Optional.ofNullable(orgOpencontainersImageLicenses);
        return this;
    }

    public Annotations withOrgOpencontainersImageLicenses(Optional<String> orgOpencontainersImageLicenses) {
        Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
        this.orgOpencontainersImageLicenses = orgOpencontainersImageLicenses;
        return this;
    }

    /**
     * Name of the reference for a target
     */
    public Annotations withOrgOpencontainersImageRefName(String orgOpencontainersImageRefName) {
        Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
        this.orgOpencontainersImageRefName = Optional.ofNullable(orgOpencontainersImageRefName);
        return this;
    }

    /**
     * Name of the reference for a target
     */
    public Annotations withOrgOpencontainersImageRefName(Optional<String> orgOpencontainersImageRefName) {
        Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
        this.orgOpencontainersImageRefName = orgOpencontainersImageRefName;
        return this;
    }

    /**
     * Source control revision identifier
     */
    public Annotations withOrgOpencontainersImageRevision(String orgOpencontainersImageRevision) {
        Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
        this.orgOpencontainersImageRevision = Optional.ofNullable(orgOpencontainersImageRevision);
        return this;
    }

    /**
     * Source control revision identifier
     */
    public Annotations withOrgOpencontainersImageRevision(Optional<String> orgOpencontainersImageRevision) {
        Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
        this.orgOpencontainersImageRevision = orgOpencontainersImageRevision;
        return this;
    }

    /**
     * The URL to get source code for building the image
     */
    public Annotations withOrgOpencontainersImageSource(String orgOpencontainersImageSource) {
        Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
        this.orgOpencontainersImageSource = Optional.ofNullable(orgOpencontainersImageSource);
        return this;
    }

    /**
     * The URL to get source code for building the image
     */
    public Annotations withOrgOpencontainersImageSource(Optional<String> orgOpencontainersImageSource) {
        Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
        this.orgOpencontainersImageSource = orgOpencontainersImageSource;
        return this;
    }

    /**
     * Human-readable title of the image
     */
    public Annotations withOrgOpencontainersImageTitle(String orgOpencontainersImageTitle) {
        Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
        this.orgOpencontainersImageTitle = Optional.ofNullable(orgOpencontainersImageTitle);
        return this;
    }

    /**
     * Human-readable title of the image
     */
    public Annotations withOrgOpencontainersImageTitle(Optional<String> orgOpencontainersImageTitle) {
        Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
        this.orgOpencontainersImageTitle = orgOpencontainersImageTitle;
        return this;
    }

    /**
     * The URL of the image
     */
    public Annotations withOrgOpencontainersImageUrl(String orgOpencontainersImageUrl) {
        Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
        this.orgOpencontainersImageUrl = Optional.ofNullable(orgOpencontainersImageUrl);
        return this;
    }

    /**
     * The URL of the image
     */
    public Annotations withOrgOpencontainersImageUrl(Optional<String> orgOpencontainersImageUrl) {
        Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
        this.orgOpencontainersImageUrl = orgOpencontainersImageUrl;
        return this;
    }

    /**
     * Name of the distributing entity, organization or individual.
     */
    public Annotations withOrgOpencontainersImageVendor(String orgOpencontainersImageVendor) {
        Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
        this.orgOpencontainersImageVendor = Optional.ofNullable(orgOpencontainersImageVendor);
        return this;
    }

    /**
     * Name of the distributing entity, organization or individual.
     */
    public Annotations withOrgOpencontainersImageVendor(Optional<String> orgOpencontainersImageVendor) {
        Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
        this.orgOpencontainersImageVendor = orgOpencontainersImageVendor;
        return this;
    }

    /**
     * The version of the packaged software
     */
    public Annotations withOrgOpencontainersImageVersion(String orgOpencontainersImageVersion) {
        Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
        this.orgOpencontainersImageVersion = Optional.ofNullable(orgOpencontainersImageVersion);
        return this;
    }

    /**
     * The version of the packaged software
     */
    public Annotations withOrgOpencontainersImageVersion(Optional<String> orgOpencontainersImageVersion) {
        Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
        this.orgOpencontainersImageVersion = orgOpencontainersImageVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Annotations other = (Annotations) o;
        return 
            Objects.deepEquals(this.orgOpencontainersImageAuthors, other.orgOpencontainersImageAuthors) &&
            Objects.deepEquals(this.orgOpencontainersImageCreated, other.orgOpencontainersImageCreated) &&
            Objects.deepEquals(this.orgOpencontainersImageDescription, other.orgOpencontainersImageDescription) &&
            Objects.deepEquals(this.orgOpencontainersImageDocumentation, other.orgOpencontainersImageDocumentation) &&
            Objects.deepEquals(this.orgOpencontainersImageLicenses, other.orgOpencontainersImageLicenses) &&
            Objects.deepEquals(this.orgOpencontainersImageRefName, other.orgOpencontainersImageRefName) &&
            Objects.deepEquals(this.orgOpencontainersImageRevision, other.orgOpencontainersImageRevision) &&
            Objects.deepEquals(this.orgOpencontainersImageSource, other.orgOpencontainersImageSource) &&
            Objects.deepEquals(this.orgOpencontainersImageTitle, other.orgOpencontainersImageTitle) &&
            Objects.deepEquals(this.orgOpencontainersImageUrl, other.orgOpencontainersImageUrl) &&
            Objects.deepEquals(this.orgOpencontainersImageVendor, other.orgOpencontainersImageVendor) &&
            Objects.deepEquals(this.orgOpencontainersImageVersion, other.orgOpencontainersImageVersion);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            orgOpencontainersImageAuthors,
            orgOpencontainersImageCreated,
            orgOpencontainersImageDescription,
            orgOpencontainersImageDocumentation,
            orgOpencontainersImageLicenses,
            orgOpencontainersImageRefName,
            orgOpencontainersImageRevision,
            orgOpencontainersImageSource,
            orgOpencontainersImageTitle,
            orgOpencontainersImageUrl,
            orgOpencontainersImageVendor,
            orgOpencontainersImageVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Annotations.class,
                "orgOpencontainersImageAuthors", orgOpencontainersImageAuthors,
                "orgOpencontainersImageCreated", orgOpencontainersImageCreated,
                "orgOpencontainersImageDescription", orgOpencontainersImageDescription,
                "orgOpencontainersImageDocumentation", orgOpencontainersImageDocumentation,
                "orgOpencontainersImageLicenses", orgOpencontainersImageLicenses,
                "orgOpencontainersImageRefName", orgOpencontainersImageRefName,
                "orgOpencontainersImageRevision", orgOpencontainersImageRevision,
                "orgOpencontainersImageSource", orgOpencontainersImageSource,
                "orgOpencontainersImageTitle", orgOpencontainersImageTitle,
                "orgOpencontainersImageUrl", orgOpencontainersImageUrl,
                "orgOpencontainersImageVendor", orgOpencontainersImageVendor,
                "orgOpencontainersImageVersion", orgOpencontainersImageVersion);
    }
    
    public final static class Builder {
 
        private Optional<String> orgOpencontainersImageAuthors = Optional.empty();
 
        private Optional<String> orgOpencontainersImageCreated = Optional.empty();
 
        private Optional<String> orgOpencontainersImageDescription = Optional.empty();
 
        private Optional<String> orgOpencontainersImageDocumentation = Optional.empty();
 
        private Optional<String> orgOpencontainersImageLicenses = Optional.empty();
 
        private Optional<String> orgOpencontainersImageRefName = Optional.empty();
 
        private Optional<String> orgOpencontainersImageRevision = Optional.empty();
 
        private Optional<String> orgOpencontainersImageSource = Optional.empty();
 
        private Optional<String> orgOpencontainersImageTitle = Optional.empty();
 
        private Optional<String> orgOpencontainersImageUrl = Optional.empty();
 
        private Optional<String> orgOpencontainersImageVendor = Optional.empty();
 
        private Optional<String> orgOpencontainersImageVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The authors of the image
         */
        public Builder orgOpencontainersImageAuthors(String orgOpencontainersImageAuthors) {
            Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
            this.orgOpencontainersImageAuthors = Optional.ofNullable(orgOpencontainersImageAuthors);
            return this;
        }

        /**
         * The authors of the image
         */
        public Builder orgOpencontainersImageAuthors(Optional<String> orgOpencontainersImageAuthors) {
            Utils.checkNotNull(orgOpencontainersImageAuthors, "orgOpencontainersImageAuthors");
            this.orgOpencontainersImageAuthors = orgOpencontainersImageAuthors;
            return this;
        }

        /**
         * The time the image was created
         */
        public Builder orgOpencontainersImageCreated(String orgOpencontainersImageCreated) {
            Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
            this.orgOpencontainersImageCreated = Optional.ofNullable(orgOpencontainersImageCreated);
            return this;
        }

        /**
         * The time the image was created
         */
        public Builder orgOpencontainersImageCreated(Optional<String> orgOpencontainersImageCreated) {
            Utils.checkNotNull(orgOpencontainersImageCreated, "orgOpencontainersImageCreated");
            this.orgOpencontainersImageCreated = orgOpencontainersImageCreated;
            return this;
        }

        /**
         * Human-readable description of the software packaged in the image
         */
        public Builder orgOpencontainersImageDescription(String orgOpencontainersImageDescription) {
            Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
            this.orgOpencontainersImageDescription = Optional.ofNullable(orgOpencontainersImageDescription);
            return this;
        }

        /**
         * Human-readable description of the software packaged in the image
         */
        public Builder orgOpencontainersImageDescription(Optional<String> orgOpencontainersImageDescription) {
            Utils.checkNotNull(orgOpencontainersImageDescription, "orgOpencontainersImageDescription");
            this.orgOpencontainersImageDescription = orgOpencontainersImageDescription;
            return this;
        }

        /**
         * The documentation URL of the image
         */
        public Builder orgOpencontainersImageDocumentation(String orgOpencontainersImageDocumentation) {
            Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
            this.orgOpencontainersImageDocumentation = Optional.ofNullable(orgOpencontainersImageDocumentation);
            return this;
        }

        /**
         * The documentation URL of the image
         */
        public Builder orgOpencontainersImageDocumentation(Optional<String> orgOpencontainersImageDocumentation) {
            Utils.checkNotNull(orgOpencontainersImageDocumentation, "orgOpencontainersImageDocumentation");
            this.orgOpencontainersImageDocumentation = orgOpencontainersImageDocumentation;
            return this;
        }

        public Builder orgOpencontainersImageLicenses(String orgOpencontainersImageLicenses) {
            Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
            this.orgOpencontainersImageLicenses = Optional.ofNullable(orgOpencontainersImageLicenses);
            return this;
        }

        public Builder orgOpencontainersImageLicenses(Optional<String> orgOpencontainersImageLicenses) {
            Utils.checkNotNull(orgOpencontainersImageLicenses, "orgOpencontainersImageLicenses");
            this.orgOpencontainersImageLicenses = orgOpencontainersImageLicenses;
            return this;
        }

        /**
         * Name of the reference for a target
         */
        public Builder orgOpencontainersImageRefName(String orgOpencontainersImageRefName) {
            Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
            this.orgOpencontainersImageRefName = Optional.ofNullable(orgOpencontainersImageRefName);
            return this;
        }

        /**
         * Name of the reference for a target
         */
        public Builder orgOpencontainersImageRefName(Optional<String> orgOpencontainersImageRefName) {
            Utils.checkNotNull(orgOpencontainersImageRefName, "orgOpencontainersImageRefName");
            this.orgOpencontainersImageRefName = orgOpencontainersImageRefName;
            return this;
        }

        /**
         * Source control revision identifier
         */
        public Builder orgOpencontainersImageRevision(String orgOpencontainersImageRevision) {
            Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
            this.orgOpencontainersImageRevision = Optional.ofNullable(orgOpencontainersImageRevision);
            return this;
        }

        /**
         * Source control revision identifier
         */
        public Builder orgOpencontainersImageRevision(Optional<String> orgOpencontainersImageRevision) {
            Utils.checkNotNull(orgOpencontainersImageRevision, "orgOpencontainersImageRevision");
            this.orgOpencontainersImageRevision = orgOpencontainersImageRevision;
            return this;
        }

        /**
         * The URL to get source code for building the image
         */
        public Builder orgOpencontainersImageSource(String orgOpencontainersImageSource) {
            Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
            this.orgOpencontainersImageSource = Optional.ofNullable(orgOpencontainersImageSource);
            return this;
        }

        /**
         * The URL to get source code for building the image
         */
        public Builder orgOpencontainersImageSource(Optional<String> orgOpencontainersImageSource) {
            Utils.checkNotNull(orgOpencontainersImageSource, "orgOpencontainersImageSource");
            this.orgOpencontainersImageSource = orgOpencontainersImageSource;
            return this;
        }

        /**
         * Human-readable title of the image
         */
        public Builder orgOpencontainersImageTitle(String orgOpencontainersImageTitle) {
            Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
            this.orgOpencontainersImageTitle = Optional.ofNullable(orgOpencontainersImageTitle);
            return this;
        }

        /**
         * Human-readable title of the image
         */
        public Builder orgOpencontainersImageTitle(Optional<String> orgOpencontainersImageTitle) {
            Utils.checkNotNull(orgOpencontainersImageTitle, "orgOpencontainersImageTitle");
            this.orgOpencontainersImageTitle = orgOpencontainersImageTitle;
            return this;
        }

        /**
         * The URL of the image
         */
        public Builder orgOpencontainersImageUrl(String orgOpencontainersImageUrl) {
            Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
            this.orgOpencontainersImageUrl = Optional.ofNullable(orgOpencontainersImageUrl);
            return this;
        }

        /**
         * The URL of the image
         */
        public Builder orgOpencontainersImageUrl(Optional<String> orgOpencontainersImageUrl) {
            Utils.checkNotNull(orgOpencontainersImageUrl, "orgOpencontainersImageUrl");
            this.orgOpencontainersImageUrl = orgOpencontainersImageUrl;
            return this;
        }

        /**
         * Name of the distributing entity, organization or individual.
         */
        public Builder orgOpencontainersImageVendor(String orgOpencontainersImageVendor) {
            Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
            this.orgOpencontainersImageVendor = Optional.ofNullable(orgOpencontainersImageVendor);
            return this;
        }

        /**
         * Name of the distributing entity, organization or individual.
         */
        public Builder orgOpencontainersImageVendor(Optional<String> orgOpencontainersImageVendor) {
            Utils.checkNotNull(orgOpencontainersImageVendor, "orgOpencontainersImageVendor");
            this.orgOpencontainersImageVendor = orgOpencontainersImageVendor;
            return this;
        }

        /**
         * The version of the packaged software
         */
        public Builder orgOpencontainersImageVersion(String orgOpencontainersImageVersion) {
            Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
            this.orgOpencontainersImageVersion = Optional.ofNullable(orgOpencontainersImageVersion);
            return this;
        }

        /**
         * The version of the packaged software
         */
        public Builder orgOpencontainersImageVersion(Optional<String> orgOpencontainersImageVersion) {
            Utils.checkNotNull(orgOpencontainersImageVersion, "orgOpencontainersImageVersion");
            this.orgOpencontainersImageVersion = orgOpencontainersImageVersion;
            return this;
        }
        
        public Annotations build() {
            return new Annotations(
                orgOpencontainersImageAuthors,
                orgOpencontainersImageCreated,
                orgOpencontainersImageDescription,
                orgOpencontainersImageDocumentation,
                orgOpencontainersImageLicenses,
                orgOpencontainersImageRefName,
                orgOpencontainersImageRevision,
                orgOpencontainersImageSource,
                orgOpencontainersImageTitle,
                orgOpencontainersImageUrl,
                orgOpencontainersImageVendor,
                orgOpencontainersImageVersion);
        }
    }
}

