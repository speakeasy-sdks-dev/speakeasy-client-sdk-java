/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class OASSummary {

    @JsonProperty("info")
    private OASInfo info;

    @JsonProperty("operations")
    private List<OASOperation> operations;

    @JsonCreator
    public OASSummary(
            @JsonProperty("info") OASInfo info,
            @JsonProperty("operations") List<OASOperation> operations) {
        Utils.checkNotNull(info, "info");
        Utils.checkNotNull(operations, "operations");
        this.info = info;
        this.operations = operations;
    }

    @JsonIgnore
    public OASInfo info() {
        return info;
    }

    @JsonIgnore
    public List<OASOperation> operations() {
        return operations;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public OASSummary withInfo(OASInfo info) {
        Utils.checkNotNull(info, "info");
        this.info = info;
        return this;
    }

    public OASSummary withOperations(List<OASOperation> operations) {
        Utils.checkNotNull(operations, "operations");
        this.operations = operations;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OASSummary other = (OASSummary) o;
        return 
            Objects.deepEquals(this.info, other.info) &&
            Objects.deepEquals(this.operations, other.operations);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            info,
            operations);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OASSummary.class,
                "info", info,
                "operations", operations);
    }
    
    public final static class Builder {
 
        private OASInfo info;
 
        private List<OASOperation> operations;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder info(OASInfo info) {
            Utils.checkNotNull(info, "info");
            this.info = info;
            return this;
        }

        public Builder operations(List<OASOperation> operations) {
            Utils.checkNotNull(operations, "operations");
            this.operations = operations;
            return this;
        }
        
        public OASSummary build() {
            return new OASSummary(
                info,
                operations);
        }
    }
}

