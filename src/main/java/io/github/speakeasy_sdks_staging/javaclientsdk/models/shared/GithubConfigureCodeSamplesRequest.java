/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * GithubConfigureCodeSamplesRequest - A request to configure GitHub code samples
 */

public class GithubConfigureCodeSamplesRequest {

    /**
     * The GitHub organization name
     */
    @JsonProperty("org")
    private String org;

    /**
     * The GitHub repository name
     */
    @JsonProperty("repo")
    private String repo;

    /**
     * The target name for the code samples
     */
    @JsonProperty("targetName")
    private String targetName;

    @JsonCreator
    public GithubConfigureCodeSamplesRequest(
            @JsonProperty("org") String org,
            @JsonProperty("repo") String repo,
            @JsonProperty("targetName") String targetName) {
        Utils.checkNotNull(org, "org");
        Utils.checkNotNull(repo, "repo");
        Utils.checkNotNull(targetName, "targetName");
        this.org = org;
        this.repo = repo;
        this.targetName = targetName;
    }

    /**
     * The GitHub organization name
     */
    @JsonIgnore
    public String org() {
        return org;
    }

    /**
     * The GitHub repository name
     */
    @JsonIgnore
    public String repo() {
        return repo;
    }

    /**
     * The target name for the code samples
     */
    @JsonIgnore
    public String targetName() {
        return targetName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The GitHub organization name
     */
    public GithubConfigureCodeSamplesRequest withOrg(String org) {
        Utils.checkNotNull(org, "org");
        this.org = org;
        return this;
    }

    /**
     * The GitHub repository name
     */
    public GithubConfigureCodeSamplesRequest withRepo(String repo) {
        Utils.checkNotNull(repo, "repo");
        this.repo = repo;
        return this;
    }

    /**
     * The target name for the code samples
     */
    public GithubConfigureCodeSamplesRequest withTargetName(String targetName) {
        Utils.checkNotNull(targetName, "targetName");
        this.targetName = targetName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubConfigureCodeSamplesRequest other = (GithubConfigureCodeSamplesRequest) o;
        return 
            Objects.deepEquals(this.org, other.org) &&
            Objects.deepEquals(this.repo, other.repo) &&
            Objects.deepEquals(this.targetName, other.targetName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            org,
            repo,
            targetName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GithubConfigureCodeSamplesRequest.class,
                "org", org,
                "repo", repo,
                "targetName", targetName);
    }
    
    public final static class Builder {
 
        private String org;
 
        private String repo;
 
        private String targetName;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The GitHub organization name
         */
        public Builder org(String org) {
            Utils.checkNotNull(org, "org");
            this.org = org;
            return this;
        }

        /**
         * The GitHub repository name
         */
        public Builder repo(String repo) {
            Utils.checkNotNull(repo, "repo");
            this.repo = repo;
            return this;
        }

        /**
         * The target name for the code samples
         */
        public Builder targetName(String targetName) {
            Utils.checkNotNull(targetName, "targetName");
            this.targetName = targetName;
            return this;
        }
        
        public GithubConfigureCodeSamplesRequest build() {
            return new GithubConfigureCodeSamplesRequest(
                org,
                repo,
                targetName);
        }
    }
}

