/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

/**
 * AddTags - Request body of tags to add to a revision
 */

public class AddTags {

    /**
     * revision digest to add tags too sha256:...
     */
    @JsonProperty("revision_digest")
    private String revisionDigest;

    /**
     * string tags to add to the revision
     */
    @JsonProperty("tags")
    private List<String> tags;

    @JsonCreator
    public AddTags(
            @JsonProperty("revision_digest") String revisionDigest,
            @JsonProperty("tags") List<String> tags) {
        Utils.checkNotNull(revisionDigest, "revisionDigest");
        Utils.checkNotNull(tags, "tags");
        this.revisionDigest = revisionDigest;
        this.tags = tags;
    }

    /**
     * revision digest to add tags too sha256:...
     */
    @JsonIgnore
    public String revisionDigest() {
        return revisionDigest;
    }

    /**
     * string tags to add to the revision
     */
    @JsonIgnore
    public List<String> tags() {
        return tags;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * revision digest to add tags too sha256:...
     */
    public AddTags withRevisionDigest(String revisionDigest) {
        Utils.checkNotNull(revisionDigest, "revisionDigest");
        this.revisionDigest = revisionDigest;
        return this;
    }

    /**
     * string tags to add to the revision
     */
    public AddTags withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddTags other = (AddTags) o;
        return 
            Objects.deepEquals(this.revisionDigest, other.revisionDigest) &&
            Objects.deepEquals(this.tags, other.tags);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            revisionDigest,
            tags);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddTags.class,
                "revisionDigest", revisionDigest,
                "tags", tags);
    }
    
    public final static class Builder {
 
        private String revisionDigest;
 
        private List<String> tags;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * revision digest to add tags too sha256:...
         */
        public Builder revisionDigest(String revisionDigest) {
            Utils.checkNotNull(revisionDigest, "revisionDigest");
            this.revisionDigest = revisionDigest;
            return this;
        }

        /**
         * string tags to add to the revision
         */
        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }
        
        public AddTags build() {
            return new AddTags(
                revisionDigest,
                tags);
        }
    }
}

