/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import io.github.speakeasy_sdks_staging.javaclientsdk.models.shared.ApiInput;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.SpeakeasyMetadata;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class UpsertApiRequest {

    /**
     * A JSON representation of the Api to upsert
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private ApiInput api;

    /**
     * The ID of the Api to upsert.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=apiID")
    private String apiID;

    @JsonCreator
    public UpsertApiRequest(
            ApiInput api,
            String apiID) {
        Utils.checkNotNull(api, "api");
        Utils.checkNotNull(apiID, "apiID");
        this.api = api;
        this.apiID = apiID;
    }

    /**
     * A JSON representation of the Api to upsert
     */
    @JsonIgnore
    public ApiInput api() {
        return api;
    }

    /**
     * The ID of the Api to upsert.
     */
    @JsonIgnore
    public String apiID() {
        return apiID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A JSON representation of the Api to upsert
     */
    public UpsertApiRequest withApi(ApiInput api) {
        Utils.checkNotNull(api, "api");
        this.api = api;
        return this;
    }

    /**
     * The ID of the Api to upsert.
     */
    public UpsertApiRequest withApiID(String apiID) {
        Utils.checkNotNull(apiID, "apiID");
        this.apiID = apiID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpsertApiRequest other = (UpsertApiRequest) o;
        return 
            Objects.deepEquals(this.api, other.api) &&
            Objects.deepEquals(this.apiID, other.apiID);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            api,
            apiID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpsertApiRequest.class,
                "api", api,
                "apiID", apiID);
    }
    
    public final static class Builder {
 
        private ApiInput api;
 
        private String apiID;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A JSON representation of the Api to upsert
         */
        public Builder api(ApiInput api) {
            Utils.checkNotNull(api, "api");
            this.api = api;
            return this;
        }

        /**
         * The ID of the Api to upsert.
         */
        public Builder apiID(String apiID) {
            Utils.checkNotNull(apiID, "apiID");
            this.apiID = apiID;
            return this;
        }
        
        public UpsertApiRequest build() {
            return new UpsertApiRequest(
                api,
                apiID);
        }
    }
}

