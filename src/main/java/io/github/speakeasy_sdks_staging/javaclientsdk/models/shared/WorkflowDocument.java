/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * WorkflowDocument - A document referenced by a workflow
 */

public class WorkflowDocument {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth")
    private Optional<? extends Auth> auth;

    @JsonProperty("location")
    private String location;

    @JsonCreator
    public WorkflowDocument(
            @JsonProperty("auth") Optional<? extends Auth> auth,
            @JsonProperty("location") String location) {
        Utils.checkNotNull(auth, "auth");
        Utils.checkNotNull(location, "location");
        this.auth = auth;
        this.location = location;
    }
    
    public WorkflowDocument(
            String location) {
        this(Optional.empty(), location);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Auth> auth() {
        return (Optional<Auth>) auth;
    }

    @JsonIgnore
    public String location() {
        return location;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public WorkflowDocument withAuth(Auth auth) {
        Utils.checkNotNull(auth, "auth");
        this.auth = Optional.ofNullable(auth);
        return this;
    }

    public WorkflowDocument withAuth(Optional<? extends Auth> auth) {
        Utils.checkNotNull(auth, "auth");
        this.auth = auth;
        return this;
    }

    public WorkflowDocument withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkflowDocument other = (WorkflowDocument) o;
        return 
            Objects.deepEquals(this.auth, other.auth) &&
            Objects.deepEquals(this.location, other.location);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            auth,
            location);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkflowDocument.class,
                "auth", auth,
                "location", location);
    }
    
    public final static class Builder {
 
        private Optional<? extends Auth> auth = Optional.empty();
 
        private String location;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder auth(Auth auth) {
            Utils.checkNotNull(auth, "auth");
            this.auth = Optional.ofNullable(auth);
            return this;
        }

        public Builder auth(Optional<? extends Auth> auth) {
            Utils.checkNotNull(auth, "auth");
            this.auth = auth;
            return this;
        }

        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }
        
        public WorkflowDocument build() {
            return new WorkflowDocument(
                auth,
                location);
        }
    }
}

