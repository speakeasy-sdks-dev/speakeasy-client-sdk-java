/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * BoundedRequest - A BoundedRequest is a request that has been logged by the Speakeasy without the contents of the request.
 */

public class BoundedRequest {

    /**
     * The ID of the ApiEndpoint this request was made to.
     */
    @JsonProperty("api_endpoint_id")
    private String apiEndpointId;

    /**
     * The ID of the Api this request was made to.
     */
    @JsonProperty("api_id")
    private String apiId;

    /**
     * Creation timestamp.
     */
    @JsonProperty("created_at")
    private OffsetDateTime createdAt;

    /**
     * The ID of the customer that made this request.
     */
    @JsonProperty("customer_id")
    private String customerId;

    /**
     * The latency of the request.
     */
    @JsonProperty("latency")
    private long latency;

    /**
     * Metadata associated with this request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<RequestMetadata>> metadata;

    /**
     * HTTP verb.
     */
    @JsonProperty("method")
    private String method;

    /**
     * The path of the request.
     */
    @JsonProperty("path")
    private String path;

    /**
     * The time the request finished.
     */
    @JsonProperty("request_finish_time")
    private OffsetDateTime requestFinishTime;

    /**
     * The ID of this request.
     */
    @JsonProperty("request_id")
    private String requestId;

    /**
     * The time the request was made.
     */
    @JsonProperty("request_start_time")
    private OffsetDateTime requestStartTime;

    /**
     * The status code of the request.
     */
    @JsonProperty("status")
    private long status;

    /**
     * The version ID of the Api this request was made to.
     */
    @JsonProperty("version_id")
    private String versionId;

    /**
     * The workspace ID this request was made to.
     */
    @JsonProperty("workspace_id")
    private String workspaceId;

    @JsonCreator
    public BoundedRequest(
            @JsonProperty("api_endpoint_id") String apiEndpointId,
            @JsonProperty("api_id") String apiId,
            @JsonProperty("created_at") OffsetDateTime createdAt,
            @JsonProperty("customer_id") String customerId,
            @JsonProperty("latency") long latency,
            @JsonProperty("metadata") Optional<? extends List<RequestMetadata>> metadata,
            @JsonProperty("method") String method,
            @JsonProperty("path") String path,
            @JsonProperty("request_finish_time") OffsetDateTime requestFinishTime,
            @JsonProperty("request_id") String requestId,
            @JsonProperty("request_start_time") OffsetDateTime requestStartTime,
            @JsonProperty("status") long status,
            @JsonProperty("version_id") String versionId,
            @JsonProperty("workspace_id") String workspaceId) {
        Utils.checkNotNull(apiEndpointId, "apiEndpointId");
        Utils.checkNotNull(apiId, "apiId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(customerId, "customerId");
        Utils.checkNotNull(latency, "latency");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(requestFinishTime, "requestFinishTime");
        Utils.checkNotNull(requestId, "requestId");
        Utils.checkNotNull(requestStartTime, "requestStartTime");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(versionId, "versionId");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.apiEndpointId = apiEndpointId;
        this.apiId = apiId;
        this.createdAt = createdAt;
        this.customerId = customerId;
        this.latency = latency;
        this.metadata = metadata;
        this.method = method;
        this.path = path;
        this.requestFinishTime = requestFinishTime;
        this.requestId = requestId;
        this.requestStartTime = requestStartTime;
        this.status = status;
        this.versionId = versionId;
        this.workspaceId = workspaceId;
    }
    
    public BoundedRequest(
            String apiEndpointId,
            String apiId,
            OffsetDateTime createdAt,
            String customerId,
            long latency,
            String method,
            String path,
            OffsetDateTime requestFinishTime,
            String requestId,
            OffsetDateTime requestStartTime,
            long status,
            String versionId,
            String workspaceId) {
        this(apiEndpointId, apiId, createdAt, customerId, latency, Optional.empty(), method, path, requestFinishTime, requestId, requestStartTime, status, versionId, workspaceId);
    }

    /**
     * The ID of the ApiEndpoint this request was made to.
     */
    @JsonIgnore
    public String apiEndpointId() {
        return apiEndpointId;
    }

    /**
     * The ID of the Api this request was made to.
     */
    @JsonIgnore
    public String apiId() {
        return apiId;
    }

    /**
     * Creation timestamp.
     */
    @JsonIgnore
    public OffsetDateTime createdAt() {
        return createdAt;
    }

    /**
     * The ID of the customer that made this request.
     */
    @JsonIgnore
    public String customerId() {
        return customerId;
    }

    /**
     * The latency of the request.
     */
    @JsonIgnore
    public long latency() {
        return latency;
    }

    /**
     * Metadata associated with this request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<RequestMetadata>> metadata() {
        return (Optional<List<RequestMetadata>>) metadata;
    }

    /**
     * HTTP verb.
     */
    @JsonIgnore
    public String method() {
        return method;
    }

    /**
     * The path of the request.
     */
    @JsonIgnore
    public String path() {
        return path;
    }

    /**
     * The time the request finished.
     */
    @JsonIgnore
    public OffsetDateTime requestFinishTime() {
        return requestFinishTime;
    }

    /**
     * The ID of this request.
     */
    @JsonIgnore
    public String requestId() {
        return requestId;
    }

    /**
     * The time the request was made.
     */
    @JsonIgnore
    public OffsetDateTime requestStartTime() {
        return requestStartTime;
    }

    /**
     * The status code of the request.
     */
    @JsonIgnore
    public long status() {
        return status;
    }

    /**
     * The version ID of the Api this request was made to.
     */
    @JsonIgnore
    public String versionId() {
        return versionId;
    }

    /**
     * The workspace ID this request was made to.
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the ApiEndpoint this request was made to.
     */
    public BoundedRequest withApiEndpointId(String apiEndpointId) {
        Utils.checkNotNull(apiEndpointId, "apiEndpointId");
        this.apiEndpointId = apiEndpointId;
        return this;
    }

    /**
     * The ID of the Api this request was made to.
     */
    public BoundedRequest withApiId(String apiId) {
        Utils.checkNotNull(apiId, "apiId");
        this.apiId = apiId;
        return this;
    }

    /**
     * Creation timestamp.
     */
    public BoundedRequest withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The ID of the customer that made this request.
     */
    public BoundedRequest withCustomerId(String customerId) {
        Utils.checkNotNull(customerId, "customerId");
        this.customerId = customerId;
        return this;
    }

    /**
     * The latency of the request.
     */
    public BoundedRequest withLatency(long latency) {
        Utils.checkNotNull(latency, "latency");
        this.latency = latency;
        return this;
    }

    /**
     * Metadata associated with this request
     */
    public BoundedRequest withMetadata(List<RequestMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Metadata associated with this request
     */
    public BoundedRequest withMetadata(Optional<? extends List<RequestMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * HTTP verb.
     */
    public BoundedRequest withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    /**
     * The path of the request.
     */
    public BoundedRequest withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    /**
     * The time the request finished.
     */
    public BoundedRequest withRequestFinishTime(OffsetDateTime requestFinishTime) {
        Utils.checkNotNull(requestFinishTime, "requestFinishTime");
        this.requestFinishTime = requestFinishTime;
        return this;
    }

    /**
     * The ID of this request.
     */
    public BoundedRequest withRequestId(String requestId) {
        Utils.checkNotNull(requestId, "requestId");
        this.requestId = requestId;
        return this;
    }

    /**
     * The time the request was made.
     */
    public BoundedRequest withRequestStartTime(OffsetDateTime requestStartTime) {
        Utils.checkNotNull(requestStartTime, "requestStartTime");
        this.requestStartTime = requestStartTime;
        return this;
    }

    /**
     * The status code of the request.
     */
    public BoundedRequest withStatus(long status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The version ID of the Api this request was made to.
     */
    public BoundedRequest withVersionId(String versionId) {
        Utils.checkNotNull(versionId, "versionId");
        this.versionId = versionId;
        return this;
    }

    /**
     * The workspace ID this request was made to.
     */
    public BoundedRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BoundedRequest other = (BoundedRequest) o;
        return 
            Objects.deepEquals(this.apiEndpointId, other.apiEndpointId) &&
            Objects.deepEquals(this.apiId, other.apiId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.customerId, other.customerId) &&
            Objects.deepEquals(this.latency, other.latency) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.path, other.path) &&
            Objects.deepEquals(this.requestFinishTime, other.requestFinishTime) &&
            Objects.deepEquals(this.requestId, other.requestId) &&
            Objects.deepEquals(this.requestStartTime, other.requestStartTime) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.versionId, other.versionId) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            apiEndpointId,
            apiId,
            createdAt,
            customerId,
            latency,
            metadata,
            method,
            path,
            requestFinishTime,
            requestId,
            requestStartTime,
            status,
            versionId,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BoundedRequest.class,
                "apiEndpointId", apiEndpointId,
                "apiId", apiId,
                "createdAt", createdAt,
                "customerId", customerId,
                "latency", latency,
                "metadata", metadata,
                "method", method,
                "path", path,
                "requestFinishTime", requestFinishTime,
                "requestId", requestId,
                "requestStartTime", requestStartTime,
                "status", status,
                "versionId", versionId,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private String apiEndpointId;
 
        private String apiId;
 
        private OffsetDateTime createdAt;
 
        private String customerId;
 
        private Long latency;
 
        private Optional<? extends List<RequestMetadata>> metadata = Optional.empty();
 
        private String method;
 
        private String path;
 
        private OffsetDateTime requestFinishTime;
 
        private String requestId;
 
        private OffsetDateTime requestStartTime;
 
        private Long status;
 
        private String versionId;
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the ApiEndpoint this request was made to.
         */
        public Builder apiEndpointId(String apiEndpointId) {
            Utils.checkNotNull(apiEndpointId, "apiEndpointId");
            this.apiEndpointId = apiEndpointId;
            return this;
        }

        /**
         * The ID of the Api this request was made to.
         */
        public Builder apiId(String apiId) {
            Utils.checkNotNull(apiId, "apiId");
            this.apiId = apiId;
            return this;
        }

        /**
         * Creation timestamp.
         */
        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The ID of the customer that made this request.
         */
        public Builder customerId(String customerId) {
            Utils.checkNotNull(customerId, "customerId");
            this.customerId = customerId;
            return this;
        }

        /**
         * The latency of the request.
         */
        public Builder latency(long latency) {
            Utils.checkNotNull(latency, "latency");
            this.latency = latency;
            return this;
        }

        /**
         * Metadata associated with this request
         */
        public Builder metadata(List<RequestMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Metadata associated with this request
         */
        public Builder metadata(Optional<? extends List<RequestMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * HTTP verb.
         */
        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        /**
         * The path of the request.
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        /**
         * The time the request finished.
         */
        public Builder requestFinishTime(OffsetDateTime requestFinishTime) {
            Utils.checkNotNull(requestFinishTime, "requestFinishTime");
            this.requestFinishTime = requestFinishTime;
            return this;
        }

        /**
         * The ID of this request.
         */
        public Builder requestId(String requestId) {
            Utils.checkNotNull(requestId, "requestId");
            this.requestId = requestId;
            return this;
        }

        /**
         * The time the request was made.
         */
        public Builder requestStartTime(OffsetDateTime requestStartTime) {
            Utils.checkNotNull(requestStartTime, "requestStartTime");
            this.requestStartTime = requestStartTime;
            return this;
        }

        /**
         * The status code of the request.
         */
        public Builder status(long status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The version ID of the Api this request was made to.
         */
        public Builder versionId(String versionId) {
            Utils.checkNotNull(versionId, "versionId");
            this.versionId = versionId;
            return this;
        }

        /**
         * The workspace ID this request was made to.
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public BoundedRequest build() {
            return new BoundedRequest(
                apiEndpointId,
                apiId,
                createdAt,
                customerId,
                latency,
                metadata,
                method,
                path,
                requestFinishTime,
                requestId,
                requestStartTime,
                status,
                versionId,
                workspaceId);
        }
    }
}

