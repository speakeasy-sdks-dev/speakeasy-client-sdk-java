/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package io.github.speakeasy_sdks_staging.javaclientsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.github.speakeasy_sdks_staging.javaclientsdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * GithubMissingPublishingSecretsResponse - A valid response containing MISSING publishing secret keys for a github target
 */

public class GithubMissingPublishingSecretsResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("missing_secrets")
    private Optional<? extends List<String>> missingSecrets;

    @JsonCreator
    public GithubMissingPublishingSecretsResponse(
            @JsonProperty("missing_secrets") Optional<? extends List<String>> missingSecrets) {
        Utils.checkNotNull(missingSecrets, "missingSecrets");
        this.missingSecrets = missingSecrets;
    }
    
    public GithubMissingPublishingSecretsResponse() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> missingSecrets() {
        return (Optional<List<String>>) missingSecrets;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GithubMissingPublishingSecretsResponse withMissingSecrets(List<String> missingSecrets) {
        Utils.checkNotNull(missingSecrets, "missingSecrets");
        this.missingSecrets = Optional.ofNullable(missingSecrets);
        return this;
    }

    public GithubMissingPublishingSecretsResponse withMissingSecrets(Optional<? extends List<String>> missingSecrets) {
        Utils.checkNotNull(missingSecrets, "missingSecrets");
        this.missingSecrets = missingSecrets;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GithubMissingPublishingSecretsResponse other = (GithubMissingPublishingSecretsResponse) o;
        return 
            Objects.deepEquals(this.missingSecrets, other.missingSecrets);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            missingSecrets);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GithubMissingPublishingSecretsResponse.class,
                "missingSecrets", missingSecrets);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> missingSecrets = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder missingSecrets(List<String> missingSecrets) {
            Utils.checkNotNull(missingSecrets, "missingSecrets");
            this.missingSecrets = Optional.ofNullable(missingSecrets);
            return this;
        }

        public Builder missingSecrets(Optional<? extends List<String>> missingSecrets) {
            Utils.checkNotNull(missingSecrets, "missingSecrets");
            this.missingSecrets = missingSecrets;
            return this;
        }
        
        public GithubMissingPublishingSecretsResponse build() {
            return new GithubMissingPublishingSecretsResponse(
                missingSecrets);
        }
    }
}

